/* The following code was generated by JFlex 1.4.3 on 12/3/14 7:11 PM */

package com.jetbrains.octave.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/3/14 7:11 PM from the specification file
 * <tt>Octave.flex</tt>
 */
class OctaveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\34\1\1\1\0\1\3\1\2\22\0\1\33\1\72\1\14"+
    "\1\5\1\0\1\4\1\37\1\13\1\46\1\47\1\41\1\35\1\45"+
    "\1\26\1\23\1\42\1\12\7\16\2\16\1\53\1\44\1\70\1\36"+
    "\1\71\1\0\1\54\1\56\3\20\1\25\1\20\2\10\1\32\4\10"+
    "\1\55\1\10\1\30\7\10\1\22\2\10\1\50\1\15\1\51\1\43"+
    "\1\11\1\0\1\61\1\73\1\75\1\17\1\24\1\60\1\103\1\76"+
    "\1\31\1\10\1\74\1\64\1\65\1\57\1\77\1\27\1\10\1\63"+
    "\1\62\1\66\1\67\1\102\1\101\1\21\1\100\1\10\1\6\1\40"+
    "\1\7\1\52\53\0\1\10\12\0\1\10\4\0\1\10\5\0\27\10"+
    "\1\0\7\10\30\10\1\0\10\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\2\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\2\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\2\10\1\10\1\10\1\10\1\10\3\10\2\10"+
    "\1\10\1\10\1\10\2\10\1\10\3\10\2\10\4\10\1\10\2\10"+
    "\1\10\3\10\3\10\2\10\1\10\2\10\1\10\1\10\1\10\1\10"+
    "\1\10\2\10\1\10\1\10\2\10\1\10\1\10\2\10\1\10\3\10"+
    "\1\10\1\10\1\10\2\10\2\10\1\10\1\10\3\10\4\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\2\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\2\10\1\10\1\10\1\10\1\10\1\10\3\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\7\10\2\10\1\10\2\10"+
    "\2\10\1\10\1\10\4\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\105\10\1\10\33\10\22\10\4\0\14\10\16\0\5\10"+
    "\7\0\1\10\1\0\1\10\201\0\1\10\1\10\1\10\1\10\1\10"+
    "\1\0\1\10\1\10\2\0\1\10\3\10\10\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\10\21\10\1\0\11\10\43\10\1\10"+
    "\2\10\3\10\3\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\5\10\1\10\1\10\1\0"+
    "\1\10\1\10\2\10\2\10\63\10\60\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\10\0\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\2\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\11\0\46\10\2\0"+
    "\1\10\7\0\47\10\110\0\33\10\5\0\3\10\55\0\40\10\1\10"+
    "\12\10\43\0\2\10\1\0\143\10\1\0\1\10\17\0\2\10\7\0"+
    "\2\10\12\0\3\10\2\0\1\10\20\0\1\10\1\0\36\10\35\0"+
    "\131\10\13\0\1\10\30\0\41\10\11\0\2\10\4\0\1\10\5\0"+
    "\26\10\4\0\1\10\11\0\1\10\3\0\1\10\27\0\31\10\107\0"+
    "\1\10\1\0\13\10\127\0\66\10\3\0\1\10\22\0\1\10\7\0"+
    "\12\10\17\0\1\10\6\10\1\0\7\10\5\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0\1\10"+
    "\20\0\1\10\15\0\2\10\1\0\3\10\16\0\2\10\23\0\6\10"+
    "\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10"+
    "\1\0\2\10\37\0\4\10\1\0\1\10\23\0\3\10\20\0\11\10"+
    "\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\3\0\1\10\22\0\1\10\17\0\2\10\43\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0\1\10"+
    "\36\0\2\10\1\0\3\10\17\0\1\10\21\0\1\10\1\0\6\10"+
    "\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10"+
    "\3\0\2\10\3\0\3\10\3\0\14\10\26\0\1\10\64\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10"+
    "\32\0\2\10\6\0\2\10\43\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\3\0\1\10\40\0\1\10\1\0\2\10"+
    "\17\0\2\10\22\0\10\10\1\0\3\10\1\0\51\10\2\0\1\10"+
    "\20\0\1\10\21\0\2\10\30\0\6\10\5\0\22\10\3\0\30\10"+
    "\1\0\11\10\1\0\1\10\2\0\7\10\72\0\60\10\1\0\2\10"+
    "\14\0\6\10\1\10\72\0\2\10\1\0\1\10\2\0\2\10\1\0"+
    "\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0"+
    "\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\0\2\10\11\0"+
    "\1\10\2\0\5\10\1\0\1\10\25\0\4\10\40\0\1\10\77\0"+
    "\10\10\1\0\44\10\33\0\5\10\163\0\53\10\24\0\1\10\20\0"+
    "\6\10\4\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0"+
    "\15\10\14\0\1\10\21\0\46\10\1\0\1\10\5\0\1\10\2\0"+
    "\53\10\1\0\1\10\u014c\10\1\0\4\10\2\0\7\10\1\0\1\10"+
    "\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10"+
    "\1\0\4\10\2\0\103\10\45\0\20\10\20\0\125\10\14\0\u026c\10"+
    "\2\0\21\10\1\0\32\10\5\0\113\10\3\0\3\10\17\0\15\10"+
    "\1\0\4\10\16\0\22\10\16\0\22\10\16\0\15\10\1\0\3\10"+
    "\17\0\64\10\43\0\1\10\4\0\1\10\103\0\43\10\1\10\64\10"+
    "\10\0\51\10\1\0\1\10\5\0\106\10\12\0\35\10\63\0\36\10"+
    "\2\0\5\10\13\0\54\10\25\0\7\10\70\0\27\10\11\0\65\10"+
    "\122\0\1\10\135\0\57\10\21\0\7\10\67\0\36\10\15\0\2\10"+
    "\12\0\54\10\32\0\44\10\51\0\3\10\12\0\36\10\6\10\153\0"+
    "\4\10\1\0\4\10\3\0\2\10\11\0\54\10\77\10\15\10\1\10"+
    "\42\10\45\10\100\0\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\11\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\11\10\10\10\6\10\2\0\6\10\2\0\10\10\10\10\10\10\10\10"+
    "\6\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\10\10\10\10\16\10\2\0\10\10\10\10\10\10"+
    "\10\10\10\10\10\10\5\10\1\0\2\10\4\10\1\10\1\0\1\10"+
    "\3\0\3\10\1\0\2\10\4\10\1\10\3\0\4\10\2\0\2\10"+
    "\4\10\4\0\10\10\5\10\5\0\3\10\1\0\2\10\4\10\1\10"+
    "\164\0\1\10\15\0\1\10\20\0\15\10\145\0\1\10\4\0\1\10"+
    "\2\0\1\10\3\10\2\10\3\10\1\10\1\0\1\10\3\0\5\10"+
    "\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\1\10"+
    "\4\10\1\10\4\10\1\10\2\0\2\10\2\10\5\0\1\10\4\10"+
    "\4\0\1\10\21\0\43\10\1\10\1\10\4\10\u0a77\0\57\10\1\0"+
    "\57\10\1\0\1\10\1\10\3\10\2\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\4\10\1\10\1\10\2\10\1\10\6\10\2\10\3\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\10\6\0"+
    "\1\10\1\10\1\10\1\10\3\0\1\10\1\10\14\0\46\10\1\0"+
    "\1\10\5\0\1\10\2\0\70\10\7\0\1\10\20\0\27\10\11\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\120\0\1\10\u01d5\0\1\10\1\10"+
    "\1\10\31\0\11\10\7\0\5\10\2\0\3\10\1\10\1\10\4\0"+
    "\126\10\6\0\2\10\1\10\1\0\132\10\1\0\3\10\1\10\5\0"+
    "\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10\112\0"+
    "\u51cd\10\63\0\25\10\1\10\u0477\10\103\0\50\10\6\10\2\0\u010c\10"+
    "\1\10\3\0\20\10\12\0\2\10\24\0\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\20\0\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\10\0"+
    "\106\10\12\10\47\0\11\10\2\0\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\3\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\10\10\1\10\1\10\1\10\1\10\2\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\0\1\10"+
    "\1\10\1\10\1\10\1\0\1\10\1\10\1\10\1\10\14\0\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\115\0\2\10\1\10\7\10\1\0\3\10\1\0\4\10\1\0\27\10"+
    "\35\0\64\10\16\0\62\10\76\0\6\10\3\0\1\10\16\0\34\10"+
    "\12\0\27\10\31\0\35\10\7\0\57\10\34\0\1\10\60\0\51\10"+
    "\27\0\3\10\1\0\10\10\24\0\20\10\1\10\6\10\3\0\1\10"+
    "\5\0\60\10\1\0\1\10\3\0\2\10\2\0\5\10\2\0\1\10"+
    "\1\0\1\10\30\0\2\10\1\10\2\0\13\10\7\0\1\10\2\10"+
    "\14\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10"+
    "\221\0\43\10\35\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10"+
    "\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10\1\0\12\10"+
    "\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\14\10"+
    "\164\0\5\10\1\0\207\10\44\0\32\10\6\0\32\10\13\0\12\10"+
    "\1\10\55\10\2\10\37\10\3\0\6\10\2\0\6\10\2\0\6\10"+
    "\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\2\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\2\1\11\1\7\1\6\1\12\1\13"+
    "\1\14\3\6\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\10\6\1\37\1\40\1\41"+
    "\5\6\2\42\5\0\1\43\1\0\1\44\1\0\1\45"+
    "\2\0\1\45\1\0\1\46\1\7\1\47\1\10\1\50"+
    "\1\0\1\51\1\52\1\53\1\54\1\55\4\6\1\56"+
    "\1\57\1\6\1\60\3\6\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\13\6\1\76\1\77\7\6\5\0\1\100\2\43"+
    "\1\0\1\43\1\0\1\15\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\6\6\1\110\1\111\2\6\1\112"+
    "\6\6\1\113\12\6\5\0\2\43\1\15\1\0\12\6"+
    "\1\114\13\6\1\115\3\6\1\116\6\6\5\0\6\6"+
    "\1\117\14\6\1\120\6\6\1\121\1\6\1\122\1\123"+
    "\3\6\1\124\1\6\3\0\7\6\1\125\5\6\1\126"+
    "\1\127\1\6\1\130\2\6\1\131\1\132\2\6\1\133"+
    "\5\6\1\134\17\6\1\135\1\136\1\137\16\6\1\140"+
    "\3\6\1\141\1\6\1\142\1\143\4\6\1\144\1\145"+
    "\2\6\1\146\6\6\1\147\5\6\1\150\2\6\1\151"+
    "\1\152\5\6\1\153\1\154\1\155\6\6\1\156\2\6"+
    "\1\157\2\6\1\160\1\161\6\6\1\162\4\6\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\104\0\314\0\u0110\0\104\0\104"+
    "\0\u0154\0\u0198\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330"+
    "\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\104\0\u050c"+
    "\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\u06e8\0\104\0\104\0\u072c"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u06e8\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\104\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\104\0\u01dc\0\u0d48\0\u0d8c\0\u0220\0\u0dd0\0\u0e14\0\104"+
    "\0\u0e58\0\u0154\0\104\0\104\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\104\0\104"+
    "\0\u1144\0\u0154\0\u1188\0\u11cc\0\u1210\0\u0154\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\u0154\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\104\0\104\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u1a08\0\104\0\104\0\104\0\104\0\104\0\u0154"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u0154"+
    "\0\u0154\0\u1c28\0\u1c6c\0\u0154\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u0154\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\104\0\u1a08\0\u22cc\0\u2310"+
    "\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u281c\0\u2860\0\u0154\0\u28a4\0\u28e8\0\u292c"+
    "\0\u0154\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u0154\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04"+
    "\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u0154"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u0154\0\u32bc"+
    "\0\u0154\0\u0154\0\u3300\0\u3344\0\u3388\0\u0154\0\u33cc\0\u3410"+
    "\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630"+
    "\0\u3674\0\u0154\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u0154"+
    "\0\u0154\0\u380c\0\u0154\0\u3850\0\u3894\0\u0154\0\u0154\0\u38d8"+
    "\0\u391c\0\u0154\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u0154"+
    "\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u0154"+
    "\0\u0154\0\u0154\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004"+
    "\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224"+
    "\0\u0154\0\u4268\0\u42ac\0\u42f0\0\u0154\0\u4334\0\u0154\0\u0154"+
    "\0\u4378\0\u43bc\0\u4400\0\u4444\0\u0154\0\u0154\0\u4488\0\u44cc"+
    "\0\u0154\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664\0\u0154"+
    "\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u0154\0\u47fc\0\u4840"+
    "\0\u0154\0\u0154\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u0154"+
    "\0\u0154\0\u0154\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c"+
    "\0\u0154\0\u4b70\0\u4bb4\0\u0154\0\u4bf8\0\u4c3c\0\u0154\0\u4c80"+
    "\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u0154\0\u4e5c"+
    "\0\u4ea0\0\u4ee4\0\u4f28\0\u0154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\2\11\1\12\1\13\1\14\1\15\1\16\1\17\3\11"+
    "\1\20\1\21\1\11\1\22\1\23\1\11\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\11\1\51\1\52\1\11\1\53"+
    "\1\54\1\11\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\11\1\64\1\11\1\65\1\11\1\66\1\11"+
    "\1\67\105\0\1\3\102\0\1\70\1\71\1\0\3\70"+
    "\1\72\76\70\1\71\1\0\3\70\1\73\75\70\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\11\11\12\0\1\74\3\0\1\75\2\0"+
    "\2\76\1\77\2\100\3\0\2\101\51\0\1\102\2\0"+
    "\10\102\1\103\1\102\1\104\66\102\1\105\2\0\11\105"+
    "\1\106\1\107\66\105\36\0\1\110\57\0\1\111\3\0"+
    "\1\16\4\0\1\77\2\100\3\0\2\101\61\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\13\11"+
    "\3\0\4\11\1\112\4\11\12\0\1\77\1\113\1\0"+
    "\1\114\1\77\4\0\1\115\2\0\1\116\6\0\1\117"+
    "\3\0\1\120\1\121\1\122\50\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\1\123\3\11\22\0\2\11\1\124"+
    "\4\11\1\125\3\11\3\0\7\11\1\126\1\11\26\0"+
    "\1\127\7\0\1\130\55\0\3\11\3\0\5\11\1\0"+
    "\1\131\1\11\1\0\2\11\1\132\1\11\22\0\4\11"+
    "\1\133\1\11\1\134\4\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\2\11"+
    "\1\135\1\136\7\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\2\11\1\135"+
    "\10\11\3\0\11\11\33\0\1\26\105\0\1\137\1\140"+
    "\103\0\1\141\103\0\1\142\1\143\102\0\1\144\1\0"+
    "\1\145\101\0\1\146\2\0\1\36\100\0\1\147\103\0"+
    "\1\150\103\0\1\151\55\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\1\11\1\152\2\11\1\153"+
    "\6\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\4\11\1\154\6\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\4\11\1\155\5\11\1\156\3\0\4\11"+
    "\1\157\4\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\11\11\1\160\1\11\3\0\6\11"+
    "\1\161\2\11\10\0\3\11\3\0\5\11\1\0\1\162"+
    "\1\11\1\0\4\11\22\0\13\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\163\1\11\1\0\4\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\6\11\1\164\4\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\2\11\1\165\10\11\3\0\11\11"+
    "\36\0\1\166\32\0\1\151\50\0\1\167\55\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\6\11"+
    "\1\170\4\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\4\11\1\171\2\11"+
    "\1\172\3\11\3\0\4\11\1\173\4\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\11\11"+
    "\1\174\1\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\13\11\3\0\3\11"+
    "\1\175\5\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\7\11\1\176\3\11\3\0\11\11"+
    "\1\70\2\0\101\70\4\177\1\200\77\177\5\201\1\202"+
    "\76\201\12\0\1\74\3\0\1\75\2\0\2\203\1\77"+
    "\2\100\3\0\2\101\63\0\1\74\3\0\1\75\4\0"+
    "\1\77\2\100\3\0\2\101\63\0\1\204\3\0\3\204"+
    "\3\0\2\204\30\0\1\204\1\0\2\204\11\0\1\204"+
    "\1\0\1\204\20\0\1\205\3\0\1\206\4\0\1\207"+
    "\2\100\3\0\2\101\63\0\1\210\3\0\1\210\7\0"+
    "\1\211\6\0\1\211\61\0\1\102\70\0\104\102\14\0"+
    "\1\105\67\0\104\105\12\0\1\111\3\0\1\16\2\0"+
    "\2\203\1\77\2\100\3\0\2\101\74\0\1\212\116\0"+
    "\1\213\103\0\1\214\103\0\1\215\2\0\1\122\100\0"+
    "\1\216\103\0\1\217\55\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\5\11\1\220\5\11\3\0"+
    "\11\11\10\0\3\11\3\0\1\11\1\221\3\11\1\0"+
    "\2\11\1\0\4\11\22\0\12\11\1\222\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\5\11\1\223\5\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\224\1\11\1\0\4\11\22\0"+
    "\13\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\6\11\1\225\4\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\6\11\1\226\4\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\4\11\1\227\4\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\3\11\1\230"+
    "\7\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\1\231\12\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\2\11\1\231\10\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\7\11"+
    "\1\232\3\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\2\11\1\233\10\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\6\11\1\234\4\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\4\11\1\235\6\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\236\1\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\4\11\1\237\4\11"+
    "\1\240\1\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\11\11\1\241\1\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\12\11\1\242\3\0\5\11\1\243"+
    "\3\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\11\11\1\244\1\11\3\0\6\11\1\245"+
    "\2\11\10\0\3\11\3\0\5\11\1\0\1\246\1\11"+
    "\1\0\4\11\22\0\13\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\5\11"+
    "\1\247\3\11\1\250\1\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\4\11"+
    "\1\251\6\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\2\11\1\252\10\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\3\11\1\253\5\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\2\11"+
    "\1\254\1\11\22\0\13\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\13\11"+
    "\3\0\4\11\1\255\4\11\4\177\1\256\77\177\4\0"+
    "\1\200\2\0\1\71\74\0\5\201\1\257\76\201\5\0"+
    "\1\202\1\0\1\71\106\0\1\260\3\0\3\260\3\0"+
    "\2\260\30\0\1\260\1\0\2\260\11\0\1\260\1\0"+
    "\1\260\20\0\1\204\3\0\3\204\2\0\1\261\2\204"+
    "\1\0\2\100\25\0\1\204\1\0\2\204\11\0\1\204"+
    "\1\0\1\204\20\0\1\205\3\0\1\206\2\0\2\203"+
    "\1\262\2\100\3\0\2\101\63\0\1\205\3\0\1\206"+
    "\4\0\1\262\2\100\3\0\2\101\63\0\1\262\3\0"+
    "\1\262\77\0\1\263\3\0\1\264\4\0\1\207\5\0"+
    "\2\101\63\0\1\210\3\0\1\210\66\0\1\265\1\0"+
    "\1\266\27\0\2\266\57\0\1\11\1\267\1\11\3\0"+
    "\5\11\1\0\1\270\1\11\1\0\1\271\1\11\1\272"+
    "\1\11\22\0\3\11\1\273\1\11\1\274\2\11\1\275"+
    "\2\11\3\0\2\11\1\276\3\11\1\277\2\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\10\11\1\300\2\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\301\1\11\1\0\4\11\22\0\13\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\2\11\1\302\10\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\5\11\1\303\5\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\3\11"+
    "\1\304\7\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\1\305\3\11\22\0\13\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\5\11\1\306\5\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\2\11\1\307\6\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\11\11\1\310"+
    "\1\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\11\11\1\311\1\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\7\11\1\312\3\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\12\11\1\313\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\13\11\3\0\3\11"+
    "\1\314\5\11\10\0\3\11\3\0\5\11\1\0\1\315"+
    "\1\11\1\0\4\11\22\0\13\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\316"+
    "\1\11\22\0\13\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\2\11\1\317\1\11\22\0"+
    "\13\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\4\11\1\320\6\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\1\321\1\11"+
    "\1\0\4\11\22\0\13\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\13\11"+
    "\3\0\2\11\1\322\6\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\5\11\1\323\5\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\11\11\1\324\1\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\325\1\11\1\0"+
    "\4\11\22\0\13\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\7\11\1\326"+
    "\3\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\13\11\3\0\1\327\10\11"+
    "\4\177\1\256\2\177\1\71\74\177\5\201\1\257\1\201"+
    "\1\71\74\201\12\0\1\260\3\0\3\260\2\0\1\330"+
    "\2\260\1\0\2\331\25\0\1\260\1\0\2\260\11\0"+
    "\1\260\1\0\1\260\20\0\1\332\3\0\1\332\77\0"+
    "\1\333\3\0\1\334\4\0\1\207\2\331\3\0\2\101"+
    "\63\0\1\263\3\0\1\264\2\0\2\203\1\262\2\331"+
    "\3\0\2\101\63\0\1\263\3\0\1\264\4\0\1\262"+
    "\2\331\3\0\2\101\61\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\11\11\1\335\1\336\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\2\11\1\337\10\11\3\0\7\11\1\340"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\4\11\1\341\1\11\1\342\4\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\3\11\1\343\7\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\12\11\1\344\3\0\4\11\1\345\4\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\13\11"+
    "\3\0\6\11\1\346\2\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\347\1\11\1\0\4\11\22\0\13\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\7\11\1\350\3\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\3\11\1\351\5\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\352\1\11\1\0\4\11\22\0\13\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\2\11\1\353\1\11\22\0\13\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\11\11\1\354\1\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\355\1\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\13\11\3\0\4\11"+
    "\1\356\4\11\10\0\3\11\3\0\5\11\1\0\1\357"+
    "\1\11\1\0\4\11\22\0\13\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\360\1\11\1\0\4\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\11\11\1\361\1\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\2\11\1\362\1\11\22\0\13\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\13\11\3\0\2\11\1\363\6\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\10\11"+
    "\1\364\2\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\6\11\1\365\4\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\4\11\1\366\4\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\7\11\1\367\3\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\2\11"+
    "\1\370\10\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\13\11\3\0\1\11"+
    "\1\371\7\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\3\11\1\372\5\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\5\11\1\373\5\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\374\1\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\6\11\1\375\4\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\1\376"+
    "\1\11\1\0\4\11\22\0\13\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\4\11\1\377\6\11\3\0\11\11\12\0\1\u0100\3\0"+
    "\1\u0100\77\0\1\u0101\3\0\1\u0101\7\0\1\u0102\6\0"+
    "\1\u0102\60\0\1\332\3\0\1\332\10\0\2\100\65\0"+
    "\1\333\3\0\1\334\2\0\2\203\1\262\2\331\3\0"+
    "\2\101\63\0\1\333\3\0\1\334\4\0\1\262\2\331"+
    "\3\0\2\101\61\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\6\11\1\u0103\4\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\2\11\1\u0104\10\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\12\11"+
    "\1\u0105\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\u0106\1\11\1\0\4\11\22\0\13\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\6\11\1\u0107\4\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\13\11"+
    "\3\0\4\11\1\u0108\4\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\2\11\1\u0109\10\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\6\11\1\u010a\4\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\2\11"+
    "\1\u010b\1\11\22\0\13\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\11\11"+
    "\1\u010c\1\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\4\11\1\u010d\6\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\2\11\1\u010e\1\11\22\0\13\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\6\11\1\u010f\4\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\3\11"+
    "\1\u0110\7\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\5\11\1\u0111\5\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\5\11\1\u0112\5\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\6\11\1\u0113\4\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\6\11"+
    "\1\u0114\4\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\2\11\1\u0115\1\11\22\0\13\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\2\11\1\u0116\6\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\13\11\3\0\3\11\1\u0117\5\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\u0118\1\11"+
    "\22\0\4\11\1\u0119\6\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\2\11"+
    "\1\u011a\10\11\3\0\11\11\10\0\3\11\3\0\1\11"+
    "\1\u011b\3\11\1\0\2\11\1\0\4\11\22\0\13\11"+
    "\3\0\11\11\10\0\3\11\3\0\1\11\1\u011c\3\11"+
    "\1\0\2\11\1\0\4\11\22\0\13\11\3\0\11\11"+
    "\10\0\3\11\3\0\1\11\1\u011d\3\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\2\11"+
    "\1\u011e\10\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\13\11\3\0\6\11"+
    "\1\u011f\2\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\7\11\1\u0120\3\11\3\0\11\11"+
    "\12\0\1\u0100\3\0\1\u0100\10\0\2\331\65\0\1\333"+
    "\3\0\1\334\4\0\1\207\5\0\2\101\63\0\1\u0101"+
    "\3\0\1\u0101\75\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\5\11\1\u0121\3\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\13\11\3\0\6\11\1\u0122\2\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\10\11"+
    "\1\u0123\2\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\2\11\1\u0124\10\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\3\11\1\u0125\7\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\1\u0126"+
    "\3\11\22\0\13\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\13\11\3\0"+
    "\2\11\1\u0127\6\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\11\11\1\u0128\1\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\13\11\3\0\3\11\1\u0129\5\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\5\11\1\u012a\5\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\7\11\1\u012b"+
    "\3\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\4\11\1\u012c\6\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\11\11\1\u012d\1\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\11\11\1\u012e\1\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\13\11\3\0"+
    "\4\11\1\u012f\4\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\2\11\1\u0130\10\11\3\0"+
    "\11\11\10\0\3\11\3\0\3\11\1\u0131\1\11\1\0"+
    "\2\11\1\0\4\11\22\0\13\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\5\11\1\u0132\5\11\3\0\11\11\10\0\1\11\1\u0133"+
    "\1\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\u0134\1\11\1\0\4\11\22\0\13\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\12\11\1\u0135\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\2\11\1\u0136\1\11\22\0"+
    "\13\11\3\0\11\11\10\0\1\11\1\u0137\1\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\13\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\2\11\1\u0138\1\11\22\0\13\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\u0139\1\11\1\0\4\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\11\11\1\u013a\1\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\4\11\1\u013b\4\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\u013c\1\11\1\0"+
    "\4\11\22\0\13\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\11\11\1\u013d"+
    "\1\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\13\11\3\0\2\11\1\u013e"+
    "\6\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\13\11\3\0\4\11\1\u013f\4\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\5\11\1\u0140\5\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\u0141\1\11\1\0\4\11\22\0\13\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\11\11\1\u0142\1\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\u0143\1\11\1\0"+
    "\4\11\22\0\13\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\2\11\1\u0144\1\11\22\0"+
    "\13\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\2\11\1\u0145\10\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\1\u0146\3\11\22\0\13\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\3\11"+
    "\1\u0147\7\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\u0148\1\11\1\0\4\11\22\0\13\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\5\11\1\u0149\5\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\2\11\1\u014a\6\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\2\11\1\u014b"+
    "\10\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\6\11\1\u014c\4\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\5\11\1\u014d\5\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\6\11\1\u014e\4\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\6\11\1\u014f"+
    "\4\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\u0150\1\11\22\0\13\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\13\11\3\0\3\11\1\u0151\5\11\10\0"+
    "\3\11\3\0\1\11\1\u0152\3\11\1\0\2\11\1\0"+
    "\4\11\22\0\13\11\3\0\11\11\10\0\3\11\3\0"+
    "\1\11\1\u0153\3\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\u0154\1\11\22\0\13\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\2\11\1\u0155\10\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\u0156\1\11\1\0\4\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\6\11\1\u0157\4\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\1\u0158"+
    "\1\11\1\0\4\11\22\0\13\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\4\11\1\u0159\6\11\3\0\11\11\10\0\3\11\3\0"+
    "\1\11\1\u015a\3\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\4\11\1\u015b\6\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\11\11\1\u015c\1\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\4\11\1\u015d\4\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\5\11\1\u015e"+
    "\5\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\u015f\1\11\1\0\4\11\22\0\13\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\13\11\3\0\4\11\1\u0160\4\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\11\11"+
    "\1\u0161\1\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\5\11\1\u0162\5\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\4\11\1\u0163\4\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\11\11\1\u0164\1\11\3\0\11\11\10\0\1\11"+
    "\1\u0165\1\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\11\11\1\u0166\1\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\2\11\1\u0167\1\11\22\0\13\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\2\11\1\u0168\10\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\3\11"+
    "\1\u0169\7\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\2\11\1\u016a\10\11"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\11\11\1\u016b\1\11\3\0\11\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\13\11\3\0\2\11\1\u016c\6\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\1\u016d\3\11\22\0"+
    "\13\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\u016e\1\11\22\0\13\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\1\u016f\1\11"+
    "\1\0\4\11\22\0\13\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\u0170\1\11\1\0\4\11\22\0"+
    "\13\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\13\11\3\0\3\11\1\u0171"+
    "\5\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\6\11\1\u0172\4\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\13\11\3\0\4\11\1\u0173\4\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\5\11\1\u0174"+
    "\5\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\13\11\3\0\2\11\1\u0175"+
    "\6\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\13\11\3\0\4\11\1\u0176\4\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\2\11\1\u0177\10\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\11\11\1\u0178"+
    "\1\11\3\0\11\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\11\11\1\u0179\1\11\3\0"+
    "\11\11\10\0\1\11\1\u017a\1\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\22\0\13\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\u017b\1\11\1\0\4\11"+
    "\22\0\13\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\22\0\13\11\3\0\2\11"+
    "\1\u017c\6\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\22\0\13\11\3\0\2\11\1\u017d\6\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\22\0\7\11\1\u017e\3\11\3\0\11\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\22\0\11\11"+
    "\1\u017f\1\11\3\0\11\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\u0180\1\11\1\0\4\11\22\0\13\11\3\0"+
    "\11\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\22\0\4\11\1\u0181\6\11\3\0\11\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\22\0"+
    "\2\11\1\u0182\10\11\3\0\11\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\22\0\12\11\1\u0183"+
    "\3\0\11\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\1\u0184\3\11\22\0\13\11\3\0\11\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20332];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\2\1\2\11\16\1\1\11"+
    "\7\1\6\11\1\1\2\11\21\1\1\11\5\0\1\1"+
    "\1\0\1\11\1\0\1\1\2\0\1\1\1\0\1\11"+
    "\2\1\2\11\1\0\11\1\2\11\6\1\13\11\14\1"+
    "\2\11\7\1\5\0\3\1\1\0\1\1\1\0\1\1"+
    "\5\11\36\1\5\0\2\1\1\11\1\0\41\1\5\0"+
    "\43\1\3\0\202\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private IElementType getTypeOrIdentifier(IElementType typeKeyWord) {
  if(!myExpectedBracketsStack.empty()) {
    return OctaveTokenTypes.IDENTIFIER;
  }
  for(int i = zzMarkedPos; i < zzBuffer.length(); i++) {
    if(setCharactersAfterIdentifier.contains(zzBuffer.charAt(i))) {
      return OctaveTokenTypes.IDENTIFIER;
    }
    if(zzBuffer.charAt(i) == ' ') {
      continue;
    }
    if(zzBuffer.charAt(i) == '\n') {
      return typeKeyWord;
    }
    if((zzBuffer.charAt(i) >= 'a'
      && zzBuffer.charAt(i) <= 'z')
      || (zzBuffer.charAt(i) >= 'A'
       && zzBuffer.charAt(i) <= 'Z'))
      {
      return typeKeyWord;
    }
    break;
  }

  for(int i = zzStartRead - 1; i >= 0; i--) {
    if(zzBuffer.charAt(i) == ' ') {
      continue;
    }
    if(zzBuffer.charAt(i) == '='
       || zzBuffer.charAt(i) == '.') {
      return OctaveTokenTypes.IDENTIFIER;
    }
    break;
  }
  return typeKeyWord;
}
private IElementType getConstOrIdentifier(IElementType typeConstWord) {
  for(int i = zzMarkedPos; i < zzBuffer.length(); i++) {
    if(zzBuffer.charAt(i) == '='
        || zzBuffer.charAt(i) == '.') {
          return OctaveTokenTypes.IDENTIFIER;
        }
    if(zzBuffer.charAt(i) == ' ') {
      continue;
    }
    break;
  }
  for(int i = zzStartRead - 1; i >= 0; i--) {
    if(zzBuffer.charAt(i) == ' ') {
      continue;
    }
    if(zzBuffer.charAt(i) == '.') {
      return OctaveTokenTypes.IDENTIFIER;
    }
    break;
  }
  return typeConstWord;
}

private Stack<IElementType> myExpectedBracketsStack = new Stack<>();
private Set<Character> setCharactersAfterIdentifier = new HashSet<>(Arrays.asList('=', '}', ']', ')', '.', '/', '\\', '*', '^', '&', '|', ':', '@', '<', '>'));
private Set<Character> setCharactersBeforeStringLiteral = new HashSet<>(Arrays.asList('=', ',', ';', '{', '[', '(', '/', '\\', '+', '-', '*', '^', '&', '|', '~', ':', '@', '<', '>', '!'));



  OctaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  OctaveLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3926) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { if(!myExpectedBracketsStack.empty() && myExpectedBracketsStack.peek() == OctaveTokenTypes.LBRACKET) {
                                myExpectedBracketsStack.pop();
                              }
                              return OctaveTokenTypes.RBRACKET;
          }
        case 116: break;
        case 115: 
          { return getTypeOrIdentifier(OctaveTokenTypes.UNWIND_PROTECT_CLEANUP_KEYWORD);
          }
        case 117: break;
        case 105: 
          { return getTypeOrIdentifier(OctaveTokenTypes.PERSISTENT_KEYWORD);
          }
        case 118: break;
        case 32: 
          { return OctaveTokenTypes.GT;
          }
        case 119: break;
        case 22: 
          { return OctaveTokenTypes.SEMICOLON;
          }
        case 120: break;
        case 6: 
          { return OctaveTokenTypes.IDENTIFIER;
          }
        case 121: break;
        case 77: 
          { return getConstOrIdentifier(OctaveTokenTypes.TRUE_KEYWORD);
          }
        case 122: break;
        case 70: 
          { return getConstOrIdentifier(OctaveTokenTypes.EPS_KEYWORD);
          }
        case 123: break;
        case 76: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ELSE_KEYWORD);
          }
        case 124: break;
        case 55: 
          { return OctaveTokenTypes.OPERATION_OR_EQ;
          }
        case 125: break;
        case 40: 
          { return OctaveTokenTypes.DOT_LEFT_DIVISION;
          }
        case 126: break;
        case 43: 
          { return OctaveTokenTypes.DOT_MULTIPLICATION;
          }
        case 127: break;
        case 37: 
          { if (zzStartRead - 1 < 0) {
                                          return OctaveTokenTypes.STRING;
                                        }
                                        if (!myExpectedBracketsStack.empty()
                                            && (myExpectedBracketsStack.peek() == OctaveTokenTypes.LBRACKET
                                                || myExpectedBracketsStack.peek() == OctaveTokenTypes.LBRACE)) {
                                          if (zzStartRead - 1 >= 0 && zzBuffer.charAt(zzStartRead - 1) == ' ') {
                                            return OctaveTokenTypes.STRING;
                                          }
                                        }
                                        for (int i = zzStartRead - 1; i >= 0; i--) {
                                          if (zzBuffer.charAt(i) == '\n') {
                                            break;
                                          }
                                          if (zzBuffer.charAt(i) == ' ') {
                                            break;
                                          }
                                          if (('a' <= zzBuffer.charAt(i) && zzBuffer.charAt(i) <= 'z')
                                              || ('A' <= zzBuffer.charAt(i) && zzBuffer.charAt(i) <= 'Z')
                                              || zzBuffer.charAt(i) == ')'
                                              || zzBuffer.charAt(i) == '}'
                                              || zzBuffer.charAt(i) == ']'
                                            ) {
                                            zzMarkedPos = zzStartRead + 1;
                                            return OctaveTokenTypes.APOSTROPHE;
                                          }
                                          if (setCharactersBeforeStringLiteral.contains(zzBuffer.charAt(i))) {
                                            break;
                                          }
                                        }
                                        return OctaveTokenTypes.STRING;
          }
        case 128: break;
        case 99: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CONTINUE_KEYWORD);
          }
        case 129: break;
        case 92: 
          { return getTypeOrIdentifier(OctaveTokenTypes.GLOBAL_KEYWORD);
          }
        case 130: break;
        case 45: 
          { return OctaveTokenTypes.DOT_POWER;
          }
        case 131: break;
        case 97: 
          { return getTypeOrIdentifier(OctaveTokenTypes.FUNCTION_KEYWORD);
          }
        case 132: break;
        case 74: 
          { return getTypeOrIdentifier(OctaveTokenTypes.FOR_KEYWORD);
          }
        case 133: break;
        case 18: 
          { return OctaveTokenTypes.OR;
          }
        case 134: break;
        case 72: 
          { return getConstOrIdentifier(OctaveTokenTypes.INF_KEYWORD);
          }
        case 135: break;
        case 28: 
          { return OctaveTokenTypes.TILDE;
          }
        case 136: break;
        case 79: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDIF_KEYWORD);
          }
        case 137: break;
        case 44: 
          { return OctaveTokenTypes.DOT_DIVISION;
          }
        case 138: break;
        case 58: 
          { return OctaveTokenTypes.OPERATION_DIV_EQ;
          }
        case 139: break;
        case 15: 
          { return OctaveTokenTypes.PLUS;
          }
        case 140: break;
        case 109: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENUMERATION_KEYWORD);
          }
        case 141: break;
        case 90: 
          { return getTypeOrIdentifier(OctaveTokenTypes.SWITCH_KEYWORD);
          }
        case 142: break;
        case 61: 
          { return getConstOrIdentifier(OctaveTokenTypes.NA_KEYWORD);
          }
        case 143: break;
        case 66: 
          { return OctaveTokenTypes.OPERATION_DOT_PLUS_EQ;
          }
        case 144: break;
        case 2: 
          { return OctaveTokenTypes.BAD_CHARACTER;
          }
        case 145: break;
        case 52: 
          { return OctaveTokenTypes.EQEQ;
          }
        case 146: break;
        case 8: 
          { return OctaveTokenTypes.APOSTROPHE;
          }
        case 147: break;
        case 65: 
          { return OctaveTokenTypes.OPERATION_DOT_MINUS_EQ;
          }
        case 148: break;
        case 102: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDSWITCH_KEYWORD);
          }
        case 149: break;
        case 104: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDMETHODS_KEYWORD);
          }
        case 150: break;
        case 73: 
          { return getConstOrIdentifier(OctaveTokenTypes.NAN_KEYWORD);
          }
        case 151: break;
        case 30: 
          { return OctaveTokenTypes.AT;
          }
        case 152: break;
        case 20: 
          { return OctaveTokenTypes.DIVISION;
          }
        case 153: break;
        case 5: 
          { if(!myExpectedBracketsStack.empty() && myExpectedBracketsStack.peek() == OctaveTokenTypes.LBRACE) {
                                myExpectedBracketsStack.pop();
                              }
                              return OctaveTokenTypes.RBRACE;
          }
        case 154: break;
        case 50: 
          { return OctaveTokenTypes.INCREMENT;
          }
        case 155: break;
        case 33: 
          { return OctaveTokenTypes.NOT;
          }
        case 156: break;
        case 12: 
          { return OctaveTokenTypes.MINUS;
          }
        case 157: break;
        case 19: 
          { return OctaveTokenTypes.MULTIPLICATION;
          }
        case 158: break;
        case 60: 
          { return OctaveTokenTypes.NOTEQ;
          }
        case 159: break;
        case 36: 
          { return OctaveTokenTypes.COMPLEX_LITERAL;
          }
        case 160: break;
        case 81: 
          { return getTypeOrIdentifier(OctaveTokenTypes.UNTIL_KEYWORD);
          }
        case 161: break;
        case 75: 
          { return getTypeOrIdentifier(OctaveTokenTypes.TRY_KEYWORD);
          }
        case 162: break;
        case 62: 
          { return OctaveTokenTypes.LE;
          }
        case 163: break;
        case 103: 
          { return getTypeOrIdentifier(OctaveTokenTypes.OTHERWISE_KEYWORD);
          }
        case 164: break;
        case 26: 
          { myExpectedBracketsStack.add(OctaveTokenTypes.LBRACKET);
                              return OctaveTokenTypes.LBRACKET;
          }
        case 165: break;
        case 42: 
          { return OctaveTokenTypes.DOT_PLUS;
          }
        case 166: break;
        case 51: 
          { return OctaveTokenTypes.OPERATION_PLUS_EQ;
          }
        case 167: break;
        case 82: 
          { return getTypeOrIdentifier(OctaveTokenTypes.BREAK_KEYWORD);
          }
        case 168: break;
        case 49: 
          { return getTypeOrIdentifier(OctaveTokenTypes.IF_KEYWORD);
          }
        case 169: break;
        case 13: 
          { return OctaveTokenTypes.SPACE;
          }
        case 170: break;
        case 46: 
          { return OctaveTokenTypes.DECREMENT;
          }
        case 171: break;
        case 110: 
          { return getTypeOrIdentifier(OctaveTokenTypes.END_TRY_CATCH_KEYWORD);
          }
        case 172: break;
        case 25: 
          { if(!myExpectedBracketsStack.empty() && myExpectedBracketsStack.peek() == OctaveTokenTypes.LPAR) {
                                myExpectedBracketsStack.pop();
                              }
                              return OctaveTokenTypes.RPAR;
          }
        case 173: break;
        case 93: 
          { return getConstOrIdentifier(OctaveTokenTypes.REALMIN_KEYWORD);
          }
        case 174: break;
        case 95: 
          { return getTypeOrIdentifier(OctaveTokenTypes.METHODS_KEYWORD);
          }
        case 175: break;
        case 112: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDENUMERATION_KEYWORD);
          }
        case 176: break;
        case 83: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CATCH_KEYWORD);
          }
        case 177: break;
        case 94: 
          { return getConstOrIdentifier(OctaveTokenTypes.REALMAX_KEYWORD);
          }
        case 178: break;
        case 63: 
          { return OctaveTokenTypes.GE;
          }
        case 179: break;
        case 9: 
          { return OctaveTokenTypes.LEFT_DIVISION;
          }
        case 180: break;
        case 69: 
          { return OctaveTokenTypes.OPERATION_DOT_POWER_EQ;
          }
        case 181: break;
        case 21: 
          { return OctaveTokenTypes.POWER;
          }
        case 182: break;
        case 47: 
          { return OctaveTokenTypes.OPERATION_MINUS_EQ;
          }
        case 183: break;
        case 29: 
          { return OctaveTokenTypes.COLON;
          }
        case 184: break;
        case 91: 
          { return getTypeOrIdentifier(OctaveTokenTypes.RETURN_KEYWORD);
          }
        case 185: break;
        case 114: 
          { return getTypeOrIdentifier(OctaveTokenTypes.END_UNWIND_PROTECT_KEYWORD);
          }
        case 186: break;
        case 3: 
          { return OctaveTokenTypes.FORMFEED;
          }
        case 187: break;
        case 64: 
          { return OctaveTokenTypes.HEX_INTEGER;
          }
        case 188: break;
        case 89: 
          { return getTypeOrIdentifier(OctaveTokenTypes.STATIC_KEYWORD);
          }
        case 189: break;
        case 17: 
          { return OctaveTokenTypes.AND;
          }
        case 190: break;
        case 108: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDCLASSDEF_KEYWORD);
          }
        case 191: break;
        case 71: 
          { if (zzStartRead - 1 < 0 || zzStartRead + 3 >= zzBuffer.length() ||
                                    (zzStartRead - 1 >= 0 && zzBuffer.charAt(zzStartRead - 1) != ':'
                                    && zzStartRead + 3 < zzBuffer.length() && zzBuffer.charAt(zzStartRead + 3) != ':')
                                    && myExpectedBracketsStack.empty()) {
                                  return getTypeOrIdentifier(OctaveTokenTypes.END_KEYWORD);
                                }
                                else {
                                  return OctaveTokenTypes.IDENTIFIER;
                                }
          }
        case 192: break;
        case 38: 
          { return OctaveTokenTypes.OPERATION_LEFT_DIV_EQ;
          }
        case 193: break;
        case 86: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ELSEIF_KEYWORD);
          }
        case 194: break;
        case 67: 
          { return OctaveTokenTypes.OPERATION_DOT_MULT_EQ;
          }
        case 195: break;
        case 35: 
          { return OctaveTokenTypes.FLOAT_NUMBER_LITERAL;
          }
        case 196: break;
        case 16: 
          { return OctaveTokenTypes.EQ;
          }
        case 197: break;
        case 7: 
          { return OctaveTokenTypes.INTEGER_LITERAL;
          }
        case 198: break;
        case 87: 
          { return getTypeOrIdentifier(OctaveTokenTypes.EVENTS_KEYWORD);
          }
        case 199: break;
        case 113: 
          { return getTypeOrIdentifier(OctaveTokenTypes.UNWIND_PROTECT_KEYWORD);
          }
        case 200: break;
        case 100: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDEVENTS_KEYWORD);
          }
        case 201: break;
        case 107: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDFUNCTION_KEYWORD);
          }
        case 202: break;
        case 23: 
          { return OctaveTokenTypes.COMMA;
          }
        case 203: break;
        case 96: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDWHILE_KEYWORD);
          }
        case 204: break;
        case 54: 
          { return OctaveTokenTypes.DOUBLE_AND;
          }
        case 205: break;
        case 39: 
          { return getTypeOrIdentifier(OctaveTokenTypes.DO_KEYWORD);
          }
        case 206: break;
        case 14: 
          { return OctaveTokenTypes.TAB;
          }
        case 207: break;
        case 57: 
          { return OctaveTokenTypes.OPERATION_MULT_EQ;
          }
        case 208: break;
        case 1: 
          { return OctaveTokenTypes.LINE_BREAK;
          }
        case 209: break;
        case 84: 
          { return getTypeOrIdentifier(OctaveTokenTypes.WHILE_KEYWORD);
          }
        case 210: break;
        case 53: 
          { return OctaveTokenTypes.OPERATION_AND_EQ;
          }
        case 211: break;
        case 68: 
          { return OctaveTokenTypes.OPERATION_DOT_DIV_EQ;
          }
        case 212: break;
        case 48: 
          { return getConstOrIdentifier(OctaveTokenTypes.PI_KEYWORD);
          }
        case 213: break;
        case 85: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDFOR_KEYWORD);
          }
        case 214: break;
        case 41: 
          { return OctaveTokenTypes.DOT_MINUS;
          }
        case 215: break;
        case 78: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CASE_KEYWORD);
          }
        case 216: break;
        case 106: 
          { return getTypeOrIdentifier(OctaveTokenTypes.PROPERTIES_KEYWORD);
          }
        case 217: break;
        case 31: 
          { return OctaveTokenTypes.LT;
          }
        case 218: break;
        case 24: 
          { myExpectedBracketsStack.add(OctaveTokenTypes.LPAR);
                              return OctaveTokenTypes.LPAR;
          }
        case 219: break;
        case 4: 
          { myExpectedBracketsStack.add(OctaveTokenTypes.LBRACE);
                              return OctaveTokenTypes.LBRACE;
          }
        case 220: break;
        case 88: 
          { return getTypeOrIdentifier(OctaveTokenTypes.PARFOR_KEYWORD);
          }
        case 221: break;
        case 34: 
          { return OctaveTokenTypes.COMMENT;
          }
        case 222: break;
        case 111: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDPROPERTIES_KEYWORD);
          }
        case 223: break;
        case 59: 
          { return OctaveTokenTypes.OPERATION_POWER_EQ;
          }
        case 224: break;
        case 101: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDPARFOR_KEYWORD);
          }
        case 225: break;
        case 98: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CLASSDEF_KEYWORD);
          }
        case 226: break;
        case 11: 
          { return getConstOrIdentifier(OctaveTokenTypes.E_KEYWORD);
          }
        case 227: break;
        case 56: 
          { return OctaveTokenTypes.DOUBLE_OR;
          }
        case 228: break;
        case 80: 
          { return getConstOrIdentifier(OctaveTokenTypes.FALSE_KEYWORD);
          }
        case 229: break;
        case 10: 
          { return OctaveTokenTypes.DOT;
          }
        case 230: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
