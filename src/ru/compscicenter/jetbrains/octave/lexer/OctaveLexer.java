/* The following code was generated by JFlex 1.4.3 on 11/20/14 3:30 PM */

package ru.compscicenter.jetbrains.octave.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.compscicenter.jetbrains.octave.lexer.OctaveTokenTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/20/14 3:30 PM from the specification file
 * <tt>./Octave.flex</tt>
 */
class OctaveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\1\1\0\1\3\1\2\22\0\1\43\1\103\1\14"+
    "\1\5\1\0\1\4\1\63\1\13\1\70\1\72\1\65\1\46\1\74"+
    "\1\26\1\23\1\66\1\12\7\16\2\16\1\71\1\73\1\101\1\62"+
    "\1\102\1\0\1\100\4\20\1\25\1\20\1\44\1\10\1\32\6\10"+
    "\1\30\7\10\1\22\2\10\1\75\1\15\1\76\1\67\1\11\1\0"+
    "\1\50\1\47\1\53\1\17\1\24\1\45\1\42\1\34\1\31\1\57"+
    "\1\51\1\40\1\54\1\41\1\35\1\27\1\55\1\36\1\33\1\37"+
    "\1\56\1\52\1\104\1\21\1\60\1\10\1\7\1\64\1\6\1\77"+
    "\53\0\1\10\12\0\1\10\4\0\1\10\5\0\27\10\1\0\7\10"+
    "\30\10\1\0\10\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\2\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\2\10\1\10\1\10\1\10\1\10\3\10\2\10\1\10\1\10"+
    "\1\10\2\10\1\10\3\10\2\10\4\10\1\10\2\10\1\10\3\10"+
    "\3\10\2\10\1\10\2\10\1\10\1\10\1\10\1\10\1\10\2\10"+
    "\1\10\1\10\2\10\1\10\1\10\2\10\1\10\3\10\1\10\1\10"+
    "\1\10\2\10\2\10\1\10\1\10\3\10\4\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\2\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\10"+
    "\1\10\1\10\1\10\1\10\1\10\3\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\7\10\2\10\1\10\2\10\2\10\1\10"+
    "\1\10\4\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\105\10\1\10\33\10\22\10\4\0\14\10\16\0\5\10\7\0\1\10"+
    "\1\0\1\10\201\0\1\10\1\10\1\10\1\10\1\10\1\0\1\10"+
    "\1\10\2\0\1\10\3\10\10\0\1\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\10\21\10\1\0\11\10\43\10\1\10\2\10\3\10"+
    "\3\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\5\10\1\10\1\10\1\0\1\10\1\10"+
    "\2\10\2\10\63\10\60\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\10\0\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\2\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\2\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\11\0\46\10\2\0\1\10\7\0"+
    "\47\10\110\0\33\10\5\0\3\10\55\0\40\10\1\10\12\10\43\0"+
    "\2\10\1\0\143\10\1\0\1\10\17\0\2\10\7\0\2\10\12\0"+
    "\3\10\2\0\1\10\20\0\1\10\1\0\36\10\35\0\131\10\13\0"+
    "\1\10\30\0\41\10\11\0\2\10\4\0\1\10\5\0\26\10\4\0"+
    "\1\10\11\0\1\10\3\0\1\10\27\0\31\10\107\0\1\10\1\0"+
    "\13\10\127\0\66\10\3\0\1\10\22\0\1\10\7\0\12\10\17\0"+
    "\1\10\6\10\1\0\7\10\5\0\10\10\2\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\1\10\3\0\4\10\3\0\1\10\20\0\1\10"+
    "\15\0\2\10\1\0\3\10\16\0\2\10\23\0\6\10\4\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\37\0\4\10\1\0\1\10\23\0\3\10\20\0\11\10\1\0\3\10"+
    "\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0\1\10"+
    "\22\0\1\10\17\0\2\10\43\0\10\10\2\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\5\10\3\0\1\10\36\0\2\10"+
    "\1\0\3\10\17\0\1\10\21\0\1\10\1\0\6\10\3\0\3\10"+
    "\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10"+
    "\3\0\3\10\3\0\14\10\26\0\1\10\64\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10\32\0\2\10"+
    "\6\0\2\10\43\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10"+
    "\1\0\5\10\3\0\1\10\40\0\1\10\1\0\2\10\17\0\2\10"+
    "\22\0\10\10\1\0\3\10\1\0\51\10\2\0\1\10\20\0\1\10"+
    "\21\0\2\10\30\0\6\10\5\0\22\10\3\0\30\10\1\0\11\10"+
    "\1\0\1\10\2\0\7\10\72\0\60\10\1\0\2\10\14\0\6\10"+
    "\1\10\72\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0"+
    "\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0"+
    "\1\10\2\0\2\10\1\0\4\10\1\0\2\10\11\0\1\10\2\0"+
    "\5\10\1\0\1\10\25\0\4\10\40\0\1\10\77\0\10\10\1\0"+
    "\44\10\33\0\5\10\163\0\53\10\24\0\1\10\20\0\6\10\4\0"+
    "\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10\14\0"+
    "\1\10\21\0\46\10\1\0\1\10\5\0\1\10\2\0\53\10\1\0"+
    "\1\10\u014c\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10\2\0\7\10"+
    "\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10\1\0\4\10"+
    "\2\0\103\10\45\0\20\10\20\0\125\10\14\0\u026c\10\2\0\21\10"+
    "\1\0\32\10\5\0\113\10\3\0\3\10\17\0\15\10\1\0\4\10"+
    "\16\0\22\10\16\0\22\10\16\0\15\10\1\0\3\10\17\0\64\10"+
    "\43\0\1\10\4\0\1\10\103\0\43\10\1\10\64\10\10\0\51\10"+
    "\1\0\1\10\5\0\106\10\12\0\35\10\63\0\36\10\2\0\5\10"+
    "\13\0\54\10\25\0\7\10\70\0\27\10\11\0\65\10\122\0\1\10"+
    "\135\0\57\10\21\0\7\10\67\0\36\10\15\0\2\10\12\0\54\10"+
    "\32\0\44\10\51\0\3\10\12\0\36\10\6\10\153\0\4\10\1\0"+
    "\4\10\3\0\2\10\11\0\54\10\77\10\15\10\1\10\42\10\45\10"+
    "\100\0\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\11\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\11\10\10\10"+
    "\6\10\2\0\6\10\2\0\10\10\10\10\10\10\10\10\6\10\2\0"+
    "\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\10\10\10\10\16\10\2\0\10\10\10\10\10\10\10\10\10\10"+
    "\10\10\5\10\1\0\2\10\4\10\1\10\1\0\1\10\3\0\3\10"+
    "\1\0\2\10\4\10\1\10\3\0\4\10\2\0\2\10\4\10\4\0"+
    "\10\10\5\10\5\0\3\10\1\0\2\10\4\10\1\10\164\0\1\10"+
    "\15\0\1\10\20\0\15\10\145\0\1\10\4\0\1\10\2\0\1\10"+
    "\3\10\2\10\3\10\1\10\1\0\1\10\3\0\5\10\6\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\4\10\1\0\1\10\4\10\1\10"+
    "\4\10\1\10\2\0\2\10\2\10\5\0\1\10\4\10\4\0\1\10"+
    "\21\0\43\10\1\10\1\10\4\10\u0a77\0\57\10\1\0\57\10\1\0"+
    "\1\10\1\10\3\10\2\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\4\10\1\10\1\10\2\10\1\10\6\10\2\10\3\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\2\10\6\0\1\10\1\10"+
    "\1\10\1\10\3\0\1\10\1\10\14\0\46\10\1\0\1\10\5\0"+
    "\1\10\2\0\70\10\7\0\1\10\20\0\27\10\11\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\120\0\1\10\u01d5\0\1\10\1\10\1\10\31\0"+
    "\11\10\7\0\5\10\2\0\3\10\1\10\1\10\4\0\126\10\6\0"+
    "\2\10\1\10\1\0\132\10\1\0\3\10\1\10\5\0\51\10\3\0"+
    "\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0"+
    "\25\10\1\10\u0477\10\103\0\50\10\6\10\2\0\u010c\10\1\10\3\0"+
    "\20\10\12\0\2\10\24\0\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\20\0\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\10\0\106\10\12\10"+
    "\47\0\11\10\2\0\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\3\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\10\10\1\10\1\10\1\10\1\10\2\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\2\0\1\10\1\10\1\10"+
    "\1\10\1\0\1\10\1\10\1\10\1\10\14\0\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\115\0\2\10"+
    "\1\10\7\10\1\0\3\10\1\0\4\10\1\0\27\10\35\0\64\10"+
    "\16\0\62\10\76\0\6\10\3\0\1\10\16\0\34\10\12\0\27\10"+
    "\31\0\35\10\7\0\57\10\34\0\1\10\60\0\51\10\27\0\3\10"+
    "\1\0\10\10\24\0\20\10\1\10\6\10\3\0\1\10\5\0\60\10"+
    "\1\0\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10"+
    "\30\0\2\10\1\10\2\0\13\10\7\0\1\10\2\10\14\0\6\10"+
    "\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10\221\0\43\10"+
    "\35\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10"+
    "\46\0\7\10\14\0\5\10\5\0\1\10\1\0\12\10\1\0\15\10"+
    "\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10"+
    "\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\14\10\164\0\5\10"+
    "\1\0\207\10\44\0\32\10\6\0\32\10\13\0\12\10\1\10\55\10"+
    "\2\10\37\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\10\1\7\1\13\1\7"+
    "\1\14\10\7\1\15\1\7\1\16\5\7\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\7\3\4\4\0\1\42\1\0\1\43\1\0"+
    "\1\44\2\0\1\44\1\0\1\45\1\10\1\46\1\47"+
    "\1\0\1\50\1\51\1\52\1\53\1\54\3\7\1\55"+
    "\1\56\3\7\1\57\12\7\1\60\1\61\10\7\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\0"+
    "\1\72\1\73\1\74\1\7\1\0\1\4\1\0\1\4"+
    "\1\75\1\0\1\76\2\42\1\0\1\42\2\0\1\77"+
    "\1\100\1\101\1\102\1\103\1\7\1\104\13\7\1\105"+
    "\1\7\1\106\7\7\1\107\10\7\5\0\2\42\1\15"+
    "\1\110\23\7\1\111\11\7\1\0\1\7\1\112\6\7"+
    "\1\4\5\0\7\7\1\113\15\7\1\0\4\7\1\114"+
    "\1\7\1\115\1\0\2\7\1\116\1\0\1\7\1\117"+
    "\1\7\1\0\1\120\1\7\1\121\3\0\1\122\7\7"+
    "\1\123\5\7\1\124\2\7\1\125\1\126\1\127\2\0"+
    "\1\7\1\130\1\131\2\7\12\0\2\7\1\0\2\7"+
    "\1\0\17\7\1\107\2\0\1\7\1\0\1\7\1\107"+
    "\11\0\2\7\1\0\1\7\1\132\1\107\1\0\13\7"+
    "\1\133\4\7\12\0\1\134\7\0\1\7\1\135\1\0"+
    "\1\136\4\7\1\137\1\7\1\140\1\141\6\7\1\142"+
    "\16\0\2\107\7\7\1\143\1\7\1\144\1\145\1\107"+
    "\1\0\1\107\6\0\1\107\5\7\1\146\1\147\1\150"+
    "\1\0\1\107\2\0\5\7\3\0\1\7\1\151\2\7"+
    "\1\152\1\107\1\0\2\7\1\153\2\0\1\154\1\7"+
    "\1\0\5\7\1\155\4\7\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\105\0\317\0\u0114\0\105\0\u0159"+
    "\0\u019e\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\105\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4"+
    "\0\u09f9\0\u0a3e\0\105\0\105\0\105\0\105\0\105\0\105"+
    "\0\u0a83\0\105\0\u0ac8\0\u0b0d\0\u0a83\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\105"+
    "\0\u0228\0\u0e04\0\u0e49\0\u026d\0\u0e8e\0\u0ed3\0\105\0\u0f18"+
    "\0\u019e\0\105\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\105\0\105\0\u11ca\0\u120f\0\u1254"+
    "\0\u019e\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437"+
    "\0\u147c\0\u14c1\0\u1506\0\105\0\105\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\u1773\0\105\0\105"+
    "\0\105\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\105\0\u1911"+
    "\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\105"+
    "\0\105\0\105\0\105\0\105\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u019e\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\105\0\u2577\0\u25bc\0\u2601\0\u2646"+
    "\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e"+
    "\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96"+
    "\0\u019e\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79"+
    "\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u019e\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\105\0\u2f70\0\u2fb5\0\u2ffa\0\u303f"+
    "\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267"+
    "\0\u019e\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a"+
    "\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672"+
    "\0\u36b7\0\u36fc\0\u3741\0\u019e\0\u3786\0\u019e\0\u37cb\0\u3810"+
    "\0\u3855\0\u019e\0\u389a\0\u38df\0\u019e\0\u3924\0\u3969\0\u019e"+
    "\0\u39ae\0\u019e\0\u39f3\0\u3a38\0\u3a7d\0\u019e\0\u3ac2\0\u3b07"+
    "\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u019e\0\u3ca5\0\u3cea"+
    "\0\u3d2f\0\u3d74\0\u3db9\0\u019e\0\u3dfe\0\u3e43\0\u019e\0\u019e"+
    "\0\u019e\0\u3e88\0\u3ecd\0\u3f12\0\u019e\0\u019e\0\u3f57\0\u3f9c"+
    "\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4"+
    "\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec"+
    "\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614"+
    "\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c"+
    "\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64"+
    "\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c"+
    "\0\u4cd1\0\u4d16\0\u4d5b\0\u019e\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f"+
    "\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097"+
    "\0\u50dc\0\u019e\0\u5121\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a"+
    "\0\u52bf\0\u5304\0\u5349\0\u538e\0\u53d3\0\u5418\0\u545d\0\u54a2"+
    "\0\u019e\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb\0\u5640\0\u5685"+
    "\0\u56ca\0\u019e\0\u570f\0\u019e\0\u5754\0\u5799\0\u57de\0\u5823"+
    "\0\u019e\0\u5868\0\u019e\0\u019e\0\u58ad\0\u58f2\0\u5937\0\u597c"+
    "\0\u59c1\0\u5a06\0\u019e\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f"+
    "\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87"+
    "\0\u5dcc\0\u5e11\0\105\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a"+
    "\0\u5faf\0\u5ff4\0\u019e\0\u6039\0\u019e\0\u019e\0\u607e\0\u60c3"+
    "\0\u6108\0\u614d\0\u6192\0\u61d7\0\u621c\0\u6261\0\u62a6\0\u62eb"+
    "\0\u6330\0\u6375\0\u63ba\0\u63ff\0\u6444\0\u019e\0\u019e\0\u019e"+
    "\0\u6489\0\u64ce\0\u6513\0\u6558\0\u659d\0\u65e2\0\u6627\0\u666c"+
    "\0\u66b1\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u019e\0\u680a\0\u684f"+
    "\0\u019e\0\u6894\0\u68d9\0\u691e\0\u6963\0\u019e\0\u69a8\0\u69ed"+
    "\0\u6a32\0\u6a77\0\u6abc\0\u6b01\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15"+
    "\0\u019e\0\u6c5a\0\u6c9f\0\u6ce4\0\u6d29\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\2\11\1\12\1\13\1\14\1\15\1\16\1\17\3\11"+
    "\1\20\1\21\1\11\1\22\1\23\1\11\1\24\1\11"+
    "\1\25\1\26\1\27\1\30\1\31\2\11\1\32\1\33"+
    "\1\11\1\34\1\35\1\36\1\37\2\11\1\40\1\41"+
    "\1\11\1\42\2\11\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\106\0"+
    "\1\3\103\0\1\67\2\0\4\67\1\70\76\67\2\0"+
    "\4\67\1\71\75\67\71\0\1\72\23\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\12\0\1\73\3\0\1\74\2\0"+
    "\2\75\1\76\2\77\3\0\2\100\52\0\1\101\2\0"+
    "\10\101\1\102\1\101\1\103\67\101\1\104\2\0\11\104"+
    "\1\105\1\106\67\104\62\0\1\107\34\0\1\110\3\0"+
    "\1\16\4\0\1\76\2\77\3\0\2\100\62\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\6\11\1\111\5\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\12\0\1\76"+
    "\2\0\1\112\1\76\4\0\1\113\2\0\1\114\17\0"+
    "\1\115\16\0\1\116\1\117\1\120\25\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\11\11\1\121\1\122\1\11"+
    "\1\0\2\11\1\0\3\11\1\123\6\11\23\0\1\11"+
    "\26\0\1\124\33\0\1\125\32\0\3\11\3\0\5\11"+
    "\1\0\1\126\1\11\1\0\7\11\1\127\4\11\1\0"+
    "\2\11\1\0\1\11\1\130\10\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\1\11\1\131\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\10\11\1\132\3\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\133\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\6\11\1\134\5\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\10\11\1\135\3\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\136\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\7\11\1\137\4\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\11\11\1\140\2\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\43\0\1\33\51\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\6\11\1\141"+
    "\5\11\1\0\2\11\1\0\1\11\1\142\5\11\1\143"+
    "\2\11\23\0\1\11\46\0\1\144\13\0\1\145\32\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\7\11\1\146"+
    "\4\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\3\11\1\147\1\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\6\11\1\150"+
    "\2\11\1\151\2\11\1\0\2\11\1\0\1\11\1\152"+
    "\10\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\153\1\11\1\0\6\11\1\154\5\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\12\11\1\155\1\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\62\0\1\156\104\0\1\157"+
    "\1\160\103\0\1\161\1\0\1\162\102\0\1\163\2\0"+
    "\1\51\101\0\1\164\104\0\1\165\113\0\1\166\75\0"+
    "\1\167\104\0\1\170\17\0\1\167\64\0\1\171\32\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\5\11\1\172"+
    "\6\11\1\0\2\11\1\0\12\11\23\0\1\11\1\67"+
    "\2\0\102\67\1\70\2\173\1\70\1\174\100\70\1\71"+
    "\2\175\2\71\1\176\77\71\6\0\1\177\110\0\1\73"+
    "\3\0\1\74\2\0\2\200\1\76\2\77\3\0\2\100"+
    "\64\0\1\73\3\0\1\74\4\0\1\76\2\77\3\0"+
    "\2\100\64\0\1\201\3\0\3\201\3\0\2\201\17\0"+
    "\1\201\1\0\2\201\2\0\1\201\43\0\1\202\3\0"+
    "\1\203\4\0\1\204\2\77\3\0\2\100\64\0\1\205"+
    "\3\0\1\205\7\0\1\206\17\0\1\206\51\0\1\101"+
    "\71\0\105\101\14\0\1\104\70\0\105\104\12\0\1\110"+
    "\3\0\1\16\2\0\2\200\1\76\2\77\3\0\2\100"+
    "\75\0\1\207\143\0\1\210\104\0\1\211\104\0\1\212"+
    "\2\0\1\120\101\0\1\213\104\0\1\214\32\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\1\215\7\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\1\11\1\216\3\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\7\11\1\217\2\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\220\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\7\11\1\221"+
    "\4\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\6\11\1\222"+
    "\5\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\7\11\1\223"+
    "\4\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\1\11\1\224\10\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\225"+
    "\11\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\11\11\1\226"+
    "\2\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\5\11\1\227"+
    "\6\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\10\11\1\230"+
    "\3\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\7\11\1\231\1\11\1\232\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\6\11"+
    "\1\233\5\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\7\11"+
    "\1\234\4\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\11\11"+
    "\1\235\2\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\12\11"+
    "\1\236\1\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\237\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\240"+
    "\11\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\11\11\1\241"+
    "\1\242\1\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\243\1\11\1\0"+
    "\14\11\1\0\1\11\1\244\1\0\1\11\1\245\10\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\1\246\3\11\1\247\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\250\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\7\11\1\251\4\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\252\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\253\72\0\1\177\22\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\254\11\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\4\173\1\255"+
    "\100\173\1\70\2\173\3\70\1\67\76\70\5\175\1\256"+
    "\77\175\1\71\2\175\3\71\1\67\76\71\12\0\1\257"+
    "\3\0\3\257\3\0\2\257\17\0\1\257\1\0\2\257"+
    "\2\0\1\257\43\0\1\201\3\0\3\201\2\0\1\260"+
    "\2\201\1\0\2\77\14\0\1\201\1\0\2\201\2\0"+
    "\1\201\43\0\1\202\3\0\1\203\2\0\2\200\1\261"+
    "\2\77\3\0\2\100\64\0\1\202\3\0\1\203\4\0"+
    "\1\261\2\77\3\0\2\100\64\0\1\261\3\0\1\261"+
    "\100\0\1\262\3\0\1\263\4\0\1\204\5\0\2\100"+
    "\64\0\1\205\3\0\1\205\67\0\1\264\113\0\3\11"+
    "\3\0\5\11\1\0\1\265\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\1\11\1\266"+
    "\1\11\3\0\5\11\1\0\1\267\1\11\1\0\1\270"+
    "\1\11\1\271\1\11\1\272\7\11\1\0\1\11\1\273"+
    "\1\0\4\11\1\274\1\275\4\11\23\0\1\276\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\5\11\1\277\4\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\12\11\1\300"+
    "\1\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\1\301"+
    "\7\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\1\302\13\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\14\11\1\0\1\11"+
    "\1\303\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\10\11\1\304\3\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\10\11\1\305\3\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\1\11\1\306\3\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\307\1\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\2\11\1\0\7\11"+
    "\1\310\2\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\311\1\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\1\312\11\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\5\11\1\313\4\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\1\314\7\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\4\11\1\315\5\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\1\11\1\316\10\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\1\317\7\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\6\11\1\320\5\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\10\11\1\321\3\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\1\11\1\322\10\11"+
    "\23\0\1\11\3\0\1\323\4\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\323\2\11\1\0\12\11"+
    "\1\323\22\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\1\324\7\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\325\1\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\4\11\1\326\5\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\5\11\1\327\6\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\1\330"+
    "\1\11\1\0\14\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\2\11\1\331\11\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\2\11\1\332\11\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\11\11\1\333\2\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\6\173\1\334\76\173\6\175\1\334\76\175\12\0"+
    "\1\257\3\0\3\257\2\0\1\335\2\257\1\0\2\336"+
    "\14\0\1\257\1\0\2\257\2\0\1\257\43\0\1\337"+
    "\3\0\1\337\100\0\1\340\3\0\1\341\4\0\1\204"+
    "\2\336\3\0\2\100\64\0\1\262\3\0\1\263\2\0"+
    "\2\200\1\261\2\336\3\0\2\100\64\0\1\262\3\0"+
    "\1\263\4\0\1\261\2\336\3\0\2\100\62\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\342\11\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\10\11\1\343\3\11"+
    "\1\0\2\11\1\0\7\11\1\344\2\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\12\11"+
    "\1\345\1\11\1\0\2\11\1\0\3\11\1\346\6\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\7\11\1\347\4\11\1\0\2\11\1\0\1\11"+
    "\1\350\10\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\1\11\1\351\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\352\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\6\11\1\353\5\11\1\0\2\11\1\0\7\11\1\354"+
    "\2\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\11\11\1\355\2\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\356\1\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\5\11\1\357\6\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\1\360"+
    "\1\11\1\0\14\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\10\11\1\361\3\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\2\11\1\362\11\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\1\363\1\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\6\11"+
    "\1\364\5\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\2\11"+
    "\1\365\11\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\4\11\1\366\5\11\23\0\1\11"+
    "\3\0\1\367\4\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\367\2\11\1\0\12\11\1\367\22\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\7\11\1\370\4\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\7\11\1\371\4\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\1\11\1\372\10\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\1\11\1\373\10\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\1\374\1\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\10\11"+
    "\1\375\3\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\2\11\1\376\7\11\23\0\1\11"+
    "\3\0\1\377\4\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\377\2\11\1\0\12\11\1\377\22\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\7\11\1\u0100\4\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\2\11\1\u0101\11\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\7\11\1\u0102\4\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\3\0\1\323\32\0\1\u0103\4\0\1\323\15\0"+
    "\1\323\33\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\1\u0104\7\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\5\11\1\u0105\6\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\6\11\1\u0106\5\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\3\0\1\u0107\4\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\u0107\2\11\1\0\12\11\1\u0107"+
    "\22\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\11\11\1\u0108\2\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\12\11\1\u0109\1\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\1\u010a"+
    "\1\11\1\0\14\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\12\0\1\u010b\3\0\1\u010b\100\0\1\u010c\3\0"+
    "\1\u010c\7\0\1\u010d\17\0\1\u010d\50\0\1\337\3\0"+
    "\1\337\10\0\2\77\66\0\1\340\3\0\1\341\2\0"+
    "\2\200\1\261\2\336\3\0\2\100\64\0\1\340\3\0"+
    "\1\341\4\0\1\261\2\336\3\0\2\100\62\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\14\11\1\0\1\11"+
    "\1\u010e\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\7\11\1\u010f\4\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\12\11\1\u0110\1\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\7\11\1\u0111\2\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\u0112\1\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\6\11\1\u0113\5\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\7\11\1\u0114\4\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\2\11\1\u0115\11\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\7\11\1\u0116\4\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\12\11\1\u0117\1\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\2\11\1\0\1\11"+
    "\1\u0118\10\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\u0119\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\2\11\1\u011a\11\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\7\11\1\u011b\4\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\1\u011c\7\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\1\u011d\7\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\7\11\1\u011e\4\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\7\11\1\u011f\4\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\2\11\1\0\4\11"+
    "\1\u0120\5\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\5\11\1\u0121\6\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\3\0\1\367\31\0\1\u0122"+
    "\5\0\1\367\4\0\1\u0123\10\0\1\367\33\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\u0124\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\12\11\1\u0125\1\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\11\11\1\u0126\2\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\u0127\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\2\11\1\u0128\11\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\3\0\1\377\15\0\1\u0129"+
    "\2\0\1\u012a\4\0\1\u012b\1\0\1\u012c\1\0\1\u012d"+
    "\1\0\1\u012e\1\u012f\1\u0130\1\0\1\377\4\0\1\u0131"+
    "\3\0\1\u0132\4\0\1\377\33\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\2\11\1\0\5\11"+
    "\1\u0133\4\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\12\11\1\u0134\1\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\24\0\1\u0135\70\0\3\11"+
    "\3\0\1\11\1\u0136\3\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\1\11\1\u0137\3\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\3\0\1\u0107"+
    "\31\0\1\u0138\5\0\1\u0107\15\0\1\u0107\33\0\3\11"+
    "\3\0\1\11\1\u0139\3\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\12\0\1\u010b"+
    "\3\0\1\u010b\10\0\2\336\66\0\1\340\3\0\1\341"+
    "\4\0\1\204\5\0\2\100\64\0\1\u010c\3\0\1\u010c"+
    "\76\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\11\11\1\u013a\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\u013b\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\5\11\1\u013c\4\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\12\11\1\u013d\1\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\1\u013e\13\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\1\11\1\u013f\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\10\11\1\u0140\3\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\4\11\1\u0141"+
    "\5\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\1\u0142\7\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\5\11\1\u0143\6\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\11\11\1\u0144\2\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\1\11\1\u0145"+
    "\10\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\10\11\1\u0146\3\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\10\11\1\u0147\3\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\41\0\1\u0148\3\0\1\u0149\77\0"+
    "\1\u014a\54\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\2\11\1\u014b\11\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\3\0\1\u014c\4\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\u014c\2\11\1\0\12\11\1\u014c"+
    "\22\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\6\11\1\u014d\5\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\60\0\1\u014e\101\0\1\u014f\103\0\1\u0150"+
    "\2\0\1\u014e\102\0\1\u0151\70\0\1\u014e\3\0\1\u0152"+
    "\70\0\1\u0153\123\0\1\u0154\71\0\1\u0155\125\0\1\u0156"+
    "\76\0\1\u0157\44\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\1\11\1\u0158\10\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\7\11\1\u0159\2\11"+
    "\23\0\1\11\33\0\1\u015a\61\0\3\11\3\0\5\11"+
    "\1\0\1\u015b\1\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\1\u015c\7\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\41\0\1\u015d\3\0\1\u015e\47\0"+
    "\1\11\1\u015f\1\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\1\11\1\u0160\1\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\u0161"+
    "\11\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\u0162\1\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\10\11\1\u0163\3\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\u0164\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\6\11\1\u0165\5\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\4\11\1\u0166\5\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\10\11\1\u0167\3\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\1\u0168\7\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\6\11\1\u0169\5\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\u016a\1\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\u016b\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\u016c\1\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\u016d\11\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\3\0\1\367\37\0\1\367\15\0"+
    "\1\367\70\0\1\u0148\77\0\1\u0148\54\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\1\u016e\7\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\3\0\1\u014c\17\0"+
    "\1\u016f\2\0\1\u0170\4\0\1\u0171\1\u0172\1\0\1\u0173"+
    "\1\0\1\u0174\1\u0175\1\0\1\u014c\1\0\1\u0176\1\u0170"+
    "\1\u0177\3\0\1\u0178\5\0\1\u014c\33\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\12\11\1\u0179\1\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\3\0\1\377\37\0"+
    "\1\377\15\0\1\377\101\0\1\u017a\76\0\1\u017b\112\0"+
    "\1\u017c\73\0\1\u014e\101\0\1\u017d\10\0\1\u014e\100\0"+
    "\1\u017e\73\0\1\u017f\1\0\1\u012f\103\0\1\u0180\106\0"+
    "\1\u014f\53\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\1\u0181\13\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\u0182\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\24\0"+
    "\1\u0183\70\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\1\11\1\u0184\1\0\12\11\23\0\1\11"+
    "\3\0\1\u0107\37\0\1\u0107\15\0\1\u0107\70\0\1\u015d"+
    "\47\0\3\11\3\0\5\11\1\0\2\11\1\0\1\u0185"+
    "\13\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\4\11\1\u0186\5\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\12\11\1\u0187"+
    "\1\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\7\11\1\u0188"+
    "\4\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\1\u0189"+
    "\7\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\7\11\1\u018a"+
    "\4\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\7\11\1\u018b"+
    "\4\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\5\11\1\u018c"+
    "\6\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\u018d"+
    "\11\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\1\11\1\u018e\3\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\1\11\1\u018f\3\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\u0190"+
    "\11\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\12\11\1\u0191"+
    "\1\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\u0192\1\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\23\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\u0193\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\26\0\1\u0170\17\0"+
    "\1\u0170\101\0\1\u0194\75\0\1\u0195\74\0\1\u0196\130\0"+
    "\1\u0197\71\0\1\u0198\104\0\1\u0199\12\0\1\u019a\72\0"+
    "\1\u019b\77\0\1\u0197\16\0\1\u019c\71\0\1\u019d\117\0"+
    "\1\u019e\76\0\1\u019f\112\0\1\u01a0\70\0\1\u01a1\74\0"+
    "\1\u019e\134\0\1\u017a\65\0\1\u014e\52\0\1\u01a2\4\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\u01a2"+
    "\2\11\1\0\12\11\1\u01a2\22\0\1\11\37\0\1\u01a3"+
    "\55\0\3\11\3\0\5\11\1\0\2\11\1\0\7\11"+
    "\1\u01a4\4\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\1\11\1\u01a5\10\11\23\0\1\11"+
    "\10\0\3\11\3\0\1\11\1\u01a6\3\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\1\11\1\u01a7\10\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\10\11"+
    "\1\u01a8\3\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\6\11"+
    "\1\u01a9\5\11\1\0\2\11\1\0\12\11\23\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\u01aa\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\1\u01ab"+
    "\7\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\6\11\1\u01ac"+
    "\5\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\10\11\1\u01ad"+
    "\3\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\1\u01ae"+
    "\7\11\1\0\2\11\1\0\12\11\23\0\1\11\10\0"+
    "\2\u01af\5\0\4\u01af\1\0\2\u01af\1\0\14\u01af\1\0"+
    "\2\u01af\1\0\12\u01af\23\0\1\u01af\35\0\1\u01b0\70\0"+
    "\1\u01b1\122\0\1\u01b1\102\0\1\u01b2\3\0\1\u01b3\104\0"+
    "\1\u01b4\102\0\1\u01b5\71\0\1\u01b4\121\0\1\u01b6\117\0"+
    "\1\u01b7\70\0\1\u014e\70\0\1\u014e\116\0\1\u019f\105\0"+
    "\1\u014e\50\0\1\u01a2\4\0\2\u01b8\5\0\4\u01b8\1\0"+
    "\2\u01b8\1\0\14\u01b8\1\u01a2\2\u01b8\1\0\12\u01b8\1\u01a2"+
    "\22\0\1\u01b8\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\6\11\1\u01b9\5\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\10\11\1\u01ba\3\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\1\11\1\u01bb\1\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\10\11\1\u01bc\3\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\2\11\1\u01bd\11\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\12\11\1\u01be\1\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\1\11\1\u01bf\1\0\12\11\23\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\12\11\1\u01c0\1\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\3\0\1\u014c\4\0\3\u01af\3\0\5\u01af\1\0"+
    "\2\u01af\1\0\14\u01af\1\u014c\2\u01af\1\0\12\u01af\1\u014c"+
    "\22\0\1\u01af\36\0\1\u01c1\51\0\1\u014c\37\0\1\u014c"+
    "\15\0\1\u014c\56\0\1\u01b4\113\0\1\u01c2\66\0\1\u01b1"+
    "\111\0\1\u01c3\124\0\1\u01b1\62\0\1\u01c4\65\0\3\u01b8"+
    "\3\0\5\u01b8\1\0\2\u01b8\1\0\14\u01b8\1\0\2\u01b8"+
    "\1\0\12\u01b8\23\0\1\u01b8\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\u01c5\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\2\11\1\0\4\11"+
    "\1\u01c6\5\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\1\u01c7\13\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\u01c8\11\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\u01c9\1\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\37\0\1\u01c2\50\0\1\u014c\37\0\1\u01ca"+
    "\15\0\1\u014c\75\0\1\u01cb\102\0\1\u01cc\44\0\3\11"+
    "\3\0\5\11\1\0\1\u01cd\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\5\11\1\u01ce\6\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\7\11\1\u01cf\4\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\6\11\1\u01d0\5\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\1\u01d1\7\11\1\0"+
    "\2\11\1\0\12\11\23\0\1\11\3\0\1\u014c\17\0"+
    "\1\u016f\1\u01d2\1\u01b1\1\u0170\4\0\1\u0171\1\u0172\1\0"+
    "\1\u0173\1\0\1\u0174\1\u0175\1\u01b1\1\u014c\1\u01b1\1\u0176"+
    "\1\u0170\1\u0177\3\0\1\u0178\5\0\1\u014c\47\0\1\u01d3"+
    "\133\0\1\u0197\41\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\4\11\1\u01d4\5\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\6\11\1\u01d5\5\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\12\11\1\u01d6\1\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\3\0\1\u014c\35\0\1\u01d7\1\0\1\u014c"+
    "\15\0\1\u014c\51\0\1\u01d8\66\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\u01d9\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\u01da\3\11\1\0\2\11"+
    "\1\0\12\11\23\0\1\11\42\0\1\u01b1\76\0\1\u0172"+
    "\12\0\1\u01db\45\0\1\11\1\u01dc\1\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\1\u01dd"+
    "\1\11\1\0\14\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11\31\0\1\u0197\63\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\4\11\1\u01de"+
    "\5\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\4\11\1\u01df"+
    "\5\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\11\11\1\u01e0\2\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\10\11\1\u01e1\3\11\1\0\2\11\1\0"+
    "\12\11\23\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\u01e2\1\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\1\11\1\u01e3\10\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\12\11\1\u01e4\1\11\1\0\2\11\1\0\12\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\7\11\1\u01e5\2\11"+
    "\23\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\1\u01e6\13\11\1\0\2\11\1\0\12\11\23\0"+
    "\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28014];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\2\1\1\11\33\1\1\11"+
    "\7\1\6\11\1\1\1\11\7\1\4\0\1\1\1\0"+
    "\1\11\1\0\1\1\2\0\1\1\1\0\1\11\2\1"+
    "\1\11\1\0\10\1\2\11\16\1\2\11\10\1\10\11"+
    "\1\0\3\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\3\1\1\0\1\1\2\0\5\11\40\1\5\0"+
    "\2\1\1\11\36\1\1\0\10\1\1\11\5\0\25\1"+
    "\1\0\7\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\3\0\24\1\2\0\5\1\12\0\2\1\1\0\2\1"+
    "\1\0\20\1\2\0\1\1\1\0\2\1\11\0\2\1"+
    "\1\0\3\1\1\0\20\1\12\0\1\1\7\0\2\1"+
    "\1\0\20\1\16\0\1\1\1\11\14\1\1\0\1\1"+
    "\6\0\11\1\1\0\1\1\2\0\5\1\3\0\6\1"+
    "\1\0\3\1\2\0\2\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  OctaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  OctaveLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3922) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 104: 
          { return OctaveTokenTypes.ENUMERATION_KEYWORD;
          }
        case 111: break;
        case 32: 
          { return OctaveTokenTypes.GT;
          }
        case 112: break;
        case 25: 
          { return OctaveTokenTypes.SEMICOLON;
          }
        case 113: break;
        case 7: 
          { return OctaveTokenTypes.IDENTIFIER;
          }
        case 114: break;
        case 53: 
          { return OctaveTokenTypes.OPERATION_OR_EQ;
          }
        case 115: break;
        case 106: 
          { return OctaveTokenTypes.ENDPROPERTIES_KEYWORD;
          }
        case 116: break;
        case 92: 
          { return OctaveTokenTypes.FUNCTION_KEYWORD;
          }
        case 117: break;
        case 39: 
          { return OctaveTokenTypes.DOT_LEFT_DIVISION;
          }
        case 118: break;
        case 42: 
          { return OctaveTokenTypes.DOT_MULTIPLICATION;
          }
        case 119: break;
        case 44: 
          { return OctaveTokenTypes.DOT_POWER;
          }
        case 120: break;
        case 101: 
          { return OctaveTokenTypes.PROPERTIES_KEYWORD;
          }
        case 121: break;
        case 18: 
          { return OctaveTokenTypes.OR;
          }
        case 122: break;
        case 103: 
          { return OctaveTokenTypes.ENDCLASSDEF_KEYWORD;
          }
        case 123: break;
        case 29: 
          { return OctaveTokenTypes.TILDE;
          }
        case 124: break;
        case 43: 
          { return OctaveTokenTypes.DOT_DIVISION;
          }
        case 125: break;
        case 100: 
          { return OctaveTokenTypes.PERSISTENT_KEYWORD;
          }
        case 126: break;
        case 56: 
          { return OctaveTokenTypes.OPERATION_DIV_EQ;
          }
        case 127: break;
        case 69: 
          { return OctaveTokenTypes.TRY_KEYWORD;
          }
        case 128: break;
        case 14: 
          { return OctaveTokenTypes.PLUS;
          }
        case 129: break;
        case 64: 
          { return OctaveTokenTypes.OPERATION_DOT_PLUS_EQ;
          }
        case 130: break;
        case 5: 
          { return OctaveTokenTypes.RBRACE;
          }
        case 131: break;
        case 97: 
          { return OctaveTokenTypes.ENDSWITCH_KEYWORD;
          }
        case 132: break;
        case 82: 
          { return OctaveTokenTypes.ELSEIF_KEYWORD;
          }
        case 133: break;
        case 76: 
          { return OctaveTokenTypes.FALSE_KEYWORD;
          }
        case 134: break;
        case 2: 
          { return OctaveTokenTypes.BAD_CHARACTER;
          }
        case 135: break;
        case 50: 
          { return OctaveTokenTypes.EQEQ;
          }
        case 136: break;
        case 9: 
          { return OctaveTokenTypes.APOSTROPHE;
          }
        case 137: break;
        case 63: 
          { return OctaveTokenTypes.OPERATION_DOT_MINUS_EQ;
          }
        case 138: break;
        case 85: 
          { return OctaveTokenTypes.PARFOR_KEYWORD;
          }
        case 139: break;
        case 73: 
          { return OctaveTokenTypes.TRUE_KEYWORD;
          }
        case 140: break;
        case 30: 
          { return OctaveTokenTypes.AT;
          }
        case 141: break;
        case 20: 
          { return OctaveTokenTypes.DIVISION;
          }
        case 142: break;
        case 107: 
          { return OctaveTokenTypes.ENDENUMERATION_KEYWORD;
          }
        case 143: break;
        case 48: 
          { return OctaveTokenTypes.INCREMENT;
          }
        case 144: break;
        case 33: 
          { return OctaveTokenTypes.NOT;
          }
        case 145: break;
        case 12: 
          { return OctaveTokenTypes.MINUS;
          }
        case 146: break;
        case 19: 
          { return OctaveTokenTypes.MULTIPLICATION;
          }
        case 147: break;
        case 58: 
          { return OctaveTokenTypes.NOTEQ;
          }
        case 148: break;
        case 35: 
          { return OctaveTokenTypes.COMPLEX_LITERAL;
          }
        case 149: break;
        case 6: 
          { return OctaveTokenTypes.LBRACE;
          }
        case 150: break;
        case 59: 
          { return OctaveTokenTypes.LE;
          }
        case 151: break;
        case 99: 
          { return OctaveTokenTypes.ENDMETHODS_KEYWORD;
          }
        case 152: break;
        case 74: 
          { return OctaveTokenTypes.CASE_KEYWORD;
          }
        case 153: break;
        case 28: 
          { return OctaveTokenTypes.RBRACKET;
          }
        case 154: break;
        case 41: 
          { return OctaveTokenTypes.DOT_PLUS;
          }
        case 155: break;
        case 49: 
          { return OctaveTokenTypes.OPERATION_PLUS_EQ;
          }
        case 156: break;
        case 77: 
          { return OctaveTokenTypes.BREAK_KEYWORD;
          }
        case 157: break;
        case 13: 
          { return OctaveTokenTypes.SPACE;
          }
        case 158: break;
        case 45: 
          { return OctaveTokenTypes.DECREMENT;
          }
        case 159: break;
        case 36: 
          { return OctaveTokenTypes.STRING;
          }
        case 160: break;
        case 61: 
          { return OctaveTokenTypes.ALL_COLON;
          }
        case 161: break;
        case 86: 
          { return OctaveTokenTypes.STATIC_KEYWORD;
          }
        case 162: break;
        case 75: 
          { return OctaveTokenTypes.ENDIF_KEYWORD;
          }
        case 163: break;
        case 87: 
          { return OctaveTokenTypes.SWITCH_KEYWORD;
          }
        case 164: break;
        case 60: 
          { return OctaveTokenTypes.GE;
          }
        case 165: break;
        case 10: 
          { return OctaveTokenTypes.LEFT_DIVISION;
          }
        case 166: break;
        case 67: 
          { return OctaveTokenTypes.OPERATION_DOT_POWER_EQ;
          }
        case 167: break;
        case 102: 
          { return OctaveTokenTypes.ENDFUNCTION_KEYWORD;
          }
        case 168: break;
        case 21: 
          { return OctaveTokenTypes.POWER;
          }
        case 169: break;
        case 83: 
          { return OctaveTokenTypes.ENDFOR_KEYWORD;
          }
        case 170: break;
        case 46: 
          { return OctaveTokenTypes.OPERATION_MINUS_EQ;
          }
        case 171: break;
        case 23: 
          { return OctaveTokenTypes.COLON;
          }
        case 172: break;
        case 3: 
          { return OctaveTokenTypes.FORMFEED;
          }
        case 173: break;
        case 62: 
          { return OctaveTokenTypes.HEX_INTEGER;
          }
        case 174: break;
        case 17: 
          { return OctaveTokenTypes.AND;
          }
        case 175: break;
        case 80: 
          { return OctaveTokenTypes.UNTIL_KEYWORD;
          }
        case 176: break;
        case 27: 
          { return OctaveTokenTypes.LBRACKET;
          }
        case 177: break;
        case 37: 
          { return OctaveTokenTypes.OPERATION_LEFT_DIV_EQ;
          }
        case 178: break;
        case 65: 
          { return OctaveTokenTypes.OPERATION_DOT_MULT_EQ;
          }
        case 179: break;
        case 34: 
          { return OctaveTokenTypes.FLOAT_NUMBER_LITERAL;
          }
        case 180: break;
        case 16: 
          { return OctaveTokenTypes.EQ;
          }
        case 181: break;
        case 71: 
          { return OctaveTokenTypes.SIMPLE_KEYWORD;
          }
        case 182: break;
        case 8: 
          { return OctaveTokenTypes.INTEGER_LITERAL;
          }
        case 183: break;
        case 38: 
          { return OctaveTokenTypes.DO_KEYWORD;
          }
        case 184: break;
        case 109: 
          { return OctaveTokenTypes.END_UNWIND_PROTECT_KEYWORD;
          }
        case 185: break;
        case 81: 
          { return OctaveTokenTypes.WHILE_KEYWORD;
          }
        case 186: break;
        case 24: 
          { return OctaveTokenTypes.RPAR;
          }
        case 187: break;
        case 95: 
          { return OctaveTokenTypes.ENDEVENTS_KEYWORD;
          }
        case 188: break;
        case 105: 
          { return OctaveTokenTypes.END_TRY_CATCH_KEYWORD;
          }
        case 189: break;
        case 98: 
          { return OctaveTokenTypes.OTHERWISE_KEYWORD;
          }
        case 190: break;
        case 26: 
          { return OctaveTokenTypes.COMMA;
          }
        case 191: break;
        case 72: 
          { return OctaveTokenTypes.ELSE_KEYWORD;
          }
        case 192: break;
        case 52: 
          { return OctaveTokenTypes.DOUBLE_AND;
          }
        case 193: break;
        case 110: 
          { return OctaveTokenTypes.UNWIND_PROTECT_CLEANUP_KEYWORD;
          }
        case 194: break;
        case 15: 
          { return OctaveTokenTypes.TAB;
          }
        case 195: break;
        case 93: 
          { return OctaveTokenTypes.CONTINUE_KEYWORD;
          }
        case 196: break;
        case 94: 
          { return OctaveTokenTypes.CLASSDEF_KEYWORD;
          }
        case 197: break;
        case 22: 
          { return OctaveTokenTypes.LPAR;
          }
        case 198: break;
        case 55: 
          { return OctaveTokenTypes.OPERATION_MULT_EQ;
          }
        case 199: break;
        case 68: 
          { return OctaveTokenTypes.END_KEYWORD;
          }
        case 200: break;
        case 1: 
          { return OctaveTokenTypes.LINE_BREAK;
          }
        case 201: break;
        case 51: 
          { return OctaveTokenTypes.OPERATION_AND_EQ;
          }
        case 202: break;
        case 89: 
          { return OctaveTokenTypes.GLOBAL_KEYWORD;
          }
        case 203: break;
        case 70: 
          { return OctaveTokenTypes.FOR_KEYWORD;
          }
        case 204: break;
        case 66: 
          { return OctaveTokenTypes.OPERATION_DOT_DIV_EQ;
          }
        case 205: break;
        case 40: 
          { return OctaveTokenTypes.DOT_MINUS;
          }
        case 206: break;
        case 91: 
          { return OctaveTokenTypes.ENDWHILE_KEYWORD;
          }
        case 207: break;
        case 31: 
          { return OctaveTokenTypes.LT;
          }
        case 208: break;
        case 4: 
          { return OctaveTokenTypes.COMMENT;
          }
        case 209: break;
        case 57: 
          { return OctaveTokenTypes.OPERATION_POWER_EQ;
          }
        case 210: break;
        case 108: 
          { return OctaveTokenTypes.UNWIND_PROTECT_KEYWORD;
          }
        case 211: break;
        case 79: 
          { return OctaveTokenTypes.CATCH_KEYWORD;
          }
        case 212: break;
        case 47: 
          { return OctaveTokenTypes.IF_KEYWORD;
          }
        case 213: break;
        case 96: 
          { return OctaveTokenTypes.ENDPARFOR_KEYWORD;
          }
        case 214: break;
        case 84: 
          { return OctaveTokenTypes.EVENTS_KEYWORD;
          }
        case 215: break;
        case 90: 
          { return OctaveTokenTypes.METHODS_KEYWORD;
          }
        case 216: break;
        case 54: 
          { return OctaveTokenTypes.DOUBLE_OR;
          }
        case 217: break;
        case 78: 
          { return OctaveTokenTypes.CLEAR_FUNCTION;
          }
        case 218: break;
        case 11: 
          { return OctaveTokenTypes.DOT;
          }
        case 219: break;
        case 88: 
          { return OctaveTokenTypes.RETURN_KEYWORD;
          }
        case 220: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
