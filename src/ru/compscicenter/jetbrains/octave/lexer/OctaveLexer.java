/* The following code was generated by JFlex 1.4.3 on 10/27/14 4:41 PM */

package ru.compscicenter.jetbrains.octave.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.compscicenter.jetbrains.octave.lexer.OctaveTokenTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/27/14 4:41 PM from the specification file
 * <tt>./Octave.flex</tt>
 */
class OctaveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\1\1\0\1\3\1\2\22\0\1\31\1\72\1\11"+
    "\2\0\1\4\1\74\1\10\1\35\1\36\1\44\1\23\1\26\1\43"+
    "\1\20\1\45\1\7\7\13\2\13\1\50\1\34\1\70\1\33\1\71"+
    "\2\0\1\52\3\15\1\22\1\65\2\5\1\30\2\5\1\66\1\5"+
    "\1\51\1\5\1\25\1\5\1\63\1\67\1\62\1\64\2\5\1\17"+
    "\2\5\1\37\1\12\1\40\1\46\1\6\1\0\1\55\1\75\1\77"+
    "\1\14\1\21\1\54\1\107\1\101\1\27\1\5\1\76\1\60\1\61"+
    "\1\53\1\102\1\24\1\5\1\57\1\56\1\100\1\103\1\106\1\105"+
    "\1\16\1\104\1\5\1\41\1\73\1\42\1\47\53\0\1\5\12\0"+
    "\1\5\4\0\1\5\5\0\27\5\1\0\7\5\30\5\1\0\10\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\2\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\2\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\2\5\1\5"+
    "\1\5\1\5\1\5\3\5\2\5\1\5\1\5\1\5\2\5\1\5"+
    "\3\5\2\5\4\5\1\5\2\5\1\5\3\5\3\5\2\5\1\5"+
    "\2\5\1\5\1\5\1\5\1\5\1\5\2\5\1\5\1\5\2\5"+
    "\1\5\1\5\2\5\1\5\3\5\1\5\1\5\1\5\2\5\2\5"+
    "\1\5\1\5\3\5\4\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\2\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\2\5\1\5\1\5\1\5"+
    "\1\5\1\5\3\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\7\5\2\5\1\5\2\5\2\5\1\5\1\5\4\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\105\5\1\5\33\5"+
    "\22\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\201\0"+
    "\1\5\1\5\1\5\1\5\1\5\1\0\1\5\1\5\2\0\1\5"+
    "\3\5\10\0\1\5\1\0\3\5\1\0\1\5\1\0\2\5\1\5"+
    "\21\5\1\0\11\5\43\5\1\5\2\5\3\5\3\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\5\5\1\5\1\5\1\0\1\5\1\5\2\5\2\5\63\5"+
    "\60\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\10\0\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\2\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\2\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\11\0\46\5\2\0\1\5\7\0\47\5\110\0\33\5"+
    "\5\0\3\5\55\0\40\5\1\5\12\5\43\0\2\5\1\0\143\5"+
    "\1\0\1\5\17\0\2\5\7\0\2\5\12\0\3\5\2\0\1\5"+
    "\20\0\1\5\1\0\36\5\35\0\131\5\13\0\1\5\30\0\41\5"+
    "\11\0\2\5\4\0\1\5\5\0\26\5\4\0\1\5\11\0\1\5"+
    "\3\0\1\5\27\0\31\5\107\0\1\5\1\0\13\5\127\0\66\5"+
    "\3\0\1\5\22\0\1\5\7\0\12\5\17\0\1\5\6\5\1\0"+
    "\7\5\5\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5\1\0"+
    "\3\5\16\0\2\5\23\0\6\5\4\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5\1\0"+
    "\1\5\23\0\3\5\20\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\3\0\1\5\22\0\1\5\17\0"+
    "\2\5\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\5\5\3\0\1\5\36\0\2\5\1\0\3\5\17\0"+
    "\1\5\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0"+
    "\14\5\26\0\1\5\64\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\32\0\2\5\6\0\2\5\43\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\3\0"+
    "\1\5\40\0\1\5\1\0\2\5\17\0\2\5\22\0\10\5\1\0"+
    "\3\5\1\0\51\5\2\0\1\5\20\0\1\5\21\0\2\5\30\0"+
    "\6\5\5\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0"+
    "\7\5\72\0\60\5\1\0\2\5\14\0\6\5\1\5\72\0\2\5"+
    "\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5"+
    "\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5"+
    "\1\0\4\5\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5"+
    "\25\0\4\5\40\0\1\5\77\0\10\5\1\0\44\5\33\0\5\5"+
    "\163\0\53\5\24\0\1\5\20\0\6\5\4\0\4\5\3\0\1\5"+
    "\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5\21\0\46\5"+
    "\1\0\1\5\5\0\1\5\2\0\53\5\1\0\1\5\u014c\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5\1\0"+
    "\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5\45\0"+
    "\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0"+
    "\113\5\3\0\3\5\17\0\15\5\1\0\4\5\16\0\22\5\16\0"+
    "\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5\4\0"+
    "\1\5\103\0\43\5\1\5\64\5\10\0\51\5\1\0\1\5\5\0"+
    "\106\5\12\0\35\5\63\0\36\5\2\0\5\5\13\0\54\5\25\0"+
    "\7\5\70\0\27\5\11\0\65\5\122\0\1\5\135\0\57\5\21\0"+
    "\7\5\67\0\36\5\15\0\2\5\12\0\54\5\32\0\44\5\51\0"+
    "\3\5\12\0\36\5\6\5\153\0\4\5\1\0\4\5\3\0\2\5"+
    "\11\0\54\5\77\5\15\5\1\5\42\5\45\5\100\0\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\11\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\11\5\10\5\6\5\2\0\6\5"+
    "\2\0\10\5\10\5\10\5\10\5\6\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\10\5\10\5"+
    "\16\5\2\0\10\5\10\5\10\5\10\5\10\5\10\5\5\5\1\0"+
    "\2\5\4\5\1\5\1\0\1\5\3\0\3\5\1\0\2\5\4\5"+
    "\1\5\3\0\4\5\2\0\2\5\4\5\4\0\10\5\5\5\5\0"+
    "\3\5\1\0\2\5\4\5\1\5\164\0\1\5\15\0\1\5\20\0"+
    "\15\5\145\0\1\5\4\0\1\5\2\0\1\5\3\5\2\5\3\5"+
    "\1\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\1\5\4\5\1\5\4\5\1\5\2\0"+
    "\2\5\2\5\5\0\1\5\4\5\4\0\1\5\21\0\43\5\1\5"+
    "\1\5\4\5\u0a77\0\57\5\1\0\57\5\1\0\1\5\1\5\3\5"+
    "\2\5\1\5\1\5\1\5\1\5\1\5\1\5\4\5\1\5\1\5"+
    "\2\5\1\5\6\5\2\5\3\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\2\5\6\0\1\5\1\5\1\5\1\5\3\0"+
    "\1\5\1\5\14\0\46\5\1\0\1\5\5\0\1\5\2\0\70\5"+
    "\7\0\1\5\20\0\27\5\11\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\120\0\1\5\u01d5\0\1\5\1\5\1\5\31\0\11\5\7\0\5\5"+
    "\2\0\3\5\1\5\1\5\4\0\126\5\6\0\2\5\1\5\1\0"+
    "\132\5\1\0\3\5\1\5\5\0\51\5\3\0\136\5\21\0\33\5"+
    "\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5\63\0\25\5\1\5\u0477\5"+
    "\103\0\50\5\6\5\2\0\u010c\5\1\5\3\0\20\5\12\0\2\5"+
    "\24\0\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\20\0\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\10\0\106\5\12\5\47\0\11\5\2\0"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\3\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\10\5\1\5\1\5"+
    "\1\5\1\5\2\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\2\0\1\5\1\5\1\5\1\5\1\0\1\5"+
    "\1\5\1\5\1\5\14\0\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\115\0\2\5\1\5\7\5\1\0"+
    "\3\5\1\0\4\5\1\0\27\5\35\0\64\5\16\0\62\5\76\0"+
    "\6\5\3\0\1\5\16\0\34\5\12\0\27\5\31\0\35\5\7\0"+
    "\57\5\34\0\1\5\60\0\51\5\27\0\3\5\1\0\10\5\24\0"+
    "\20\5\1\5\6\5\3\0\1\5\5\0\60\5\1\0\1\5\3\0"+
    "\2\5\2\0\5\5\2\0\1\5\1\0\1\5\30\0\2\5\1\5"+
    "\2\0\13\5\7\0\1\5\2\5\14\0\6\5\2\0\6\5\2\0"+
    "\6\5\11\0\7\5\1\0\7\5\221\0\43\5\35\0\u2ba4\5\14\0"+
    "\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0"+
    "\5\5\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\14\5\164\0\5\5\1\0\207\5\44\0"+
    "\32\5\6\0\32\5\13\0\12\5\1\5\55\5\2\5\37\5\3\0"+
    "\6\5\2\0\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\4\1\5\1\6\2\7"+
    "\1\6\1\5\1\10\1\11\1\12\1\5\1\13\2\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\10\5\1\35\1\36\1\37\1\40\1\41\7\5\2\0"+
    "\1\42\1\0\1\14\1\7\1\0\1\7\1\0\1\43"+
    "\5\5\1\44\3\5\1\45\1\46\1\47\12\5\1\50"+
    "\1\51\1\52\1\53\1\54\11\5\1\55\1\42\1\0"+
    "\1\56\1\57\6\5\1\60\1\61\1\62\15\5\1\63"+
    "\5\5\1\0\12\5\1\64\12\5\1\65\2\5\1\66"+
    "\10\5\1\0\6\5\1\67\22\5\1\70\1\71\1\72"+
    "\3\5\1\73\1\5\1\74\7\5\1\75\6\5\1\76"+
    "\1\77\1\5\1\100\2\5\1\101\1\102\2\5\1\103"+
    "\5\5\1\104\17\5\1\105\1\106\1\107\16\5\1\110"+
    "\3\5\1\111\1\112\1\113\5\5\1\114\1\115\2\5"+
    "\1\116\5\5\1\117\6\5\1\120\2\5\1\121\1\122"+
    "\5\5\1\123\1\124\1\125\6\5\1\126\2\5\1\127"+
    "\2\5\1\130\1\131\6\5\1\132\4\5\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\110\0\330\0\u0120\0\u0168\0\u01b0"+
    "\0\u01f8\0\u0240\0\u0288\0\u02d0\0\u0318\0\110\0\u0360\0\110"+
    "\0\u03a8\0\u03f0\0\u0438\0\110\0\u0480\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\110\0\110\0\110\0\110\0\110"+
    "\0\110\0\110\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870"+
    "\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0"+
    "\0\u0af8\0\u0b40\0\110\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0120"+
    "\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0120\0\u0e10\0\u0e58"+
    "\0\u0ea0\0\u0120\0\110\0\u0120\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\110\0\110"+
    "\0\110\0\110\0\110\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8"+
    "\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u0120"+
    "\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u0120"+
    "\0\u0120\0\u0120\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878"+
    "\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u0120"+
    "\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0"+
    "\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0"+
    "\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130"+
    "\0\u2178\0\u21c0\0\u2208\0\u0120\0\u2250\0\u2298\0\u0120\0\u22e0"+
    "\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520"+
    "\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u0120\0\u2718"+
    "\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958"+
    "\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98"+
    "\0\u2be0\0\u0120\0\u0120\0\u0120\0\u2c28\0\u2c70\0\u2cb8\0\u0120"+
    "\0\u2d00\0\u0120\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0"+
    "\0\u2ef8\0\u0120\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8"+
    "\0\u0120\0\u0120\0\u30f0\0\u0120\0\u3138\0\u3180\0\u0120\0\u0120"+
    "\0\u31c8\0\u3210\0\u0120\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378"+
    "\0\u0120\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570"+
    "\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0"+
    "\0\u0120\0\u0120\0\u0120\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u3918"+
    "\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58"+
    "\0\u3ba0\0\u0120\0\u3be8\0\u3c30\0\u3c78\0\u0120\0\u0120\0\u0120"+
    "\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u0120\0\u0120\0\u3e28"+
    "\0\u3e70\0\u0120\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u0120"+
    "\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u0120\0\u41d0"+
    "\0\u4218\0\u0120\0\u0120\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380"+
    "\0\u0120\0\u0120\0\u0120\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8"+
    "\0\u4530\0\u0120\0\u4578\0\u45c0\0\u0120\0\u4608\0\u4650\0\u0120"+
    "\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848\0\u0120"+
    "\0\u4890\0\u48d8\0\u4920\0\u4968\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\2\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\3\6\1\14\1\15\1\6"+
    "\1\16\1\17\1\6\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\6"+
    "\1\44\1\45\1\6\1\46\1\47\1\6\1\50\1\51"+
    "\2\6\1\52\2\6\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\6\1\61\1\62\1\6\1\63\1\64\1\6"+
    "\1\65\1\6\1\66\111\0\1\3\106\0\1\5\2\0"+
    "\105\5\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\13\6\7\0"+
    "\1\67\3\0\1\67\2\0\2\70\1\71\2\72\3\0"+
    "\3\73\57\0\10\10\1\74\1\10\1\75\75\10\11\11"+
    "\1\76\1\77\75\11\7\0\1\12\3\0\1\12\4\0"+
    "\1\71\2\72\3\0\3\73\64\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\5\6\1\100\5\6\7\0\1\71\3\0\1\71"+
    "\101\0\3\6\3\0\5\6\1\0\2\6\1\0\1\101"+
    "\1\6\1\0\2\6\20\0\2\6\1\102\4\6\1\103"+
    "\7\6\5\0\11\6\1\104\1\6\5\0\3\6\3\0"+
    "\5\6\1\0\1\105\1\6\1\0\2\6\1\0\1\106"+
    "\1\6\20\0\4\6\1\107\1\6\1\110\10\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\2\6\1\111\1\112\13\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\2\6\1\111\14\6"+
    "\5\0\13\6\31\0\1\23\111\0\1\113\61\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\1\6\1\114\2\6\1\115\12\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\4\6\1\116\12\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\5\6\1\117\1\120"+
    "\4\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\3\6\1\121"+
    "\4\6\1\122\2\6\5\0\3\6\3\0\5\6\1\0"+
    "\1\123\1\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\1\124"+
    "\1\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\12\6\1\125\4\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\1\6\1\126\15\6\5\0"+
    "\13\6\33\0\1\127\107\0\1\130\107\0\1\131\147\0"+
    "\1\132\110\0\1\133\20\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\6\6\1\134"+
    "\10\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\4\6\1\135"+
    "\2\6\1\136\7\6\5\0\5\6\1\137\5\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\6\6\1\140\10\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\17\6\5\0\3\6\1\141\7\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\2\6\1\142\14\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\17\6\5\0\4\6\1\143\6\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\7\6\1\144\7\6\5\0\13\6\7\0"+
    "\1\67\3\0\1\67\4\0\1\71\2\72\3\0\3\73"+
    "\66\0\1\145\3\0\3\145\3\0\2\145\27\0\1\145"+
    "\1\0\2\145\7\0\1\145\7\0\1\145\1\0\1\145"+
    "\17\0\1\71\3\0\1\71\5\0\2\72\3\0\3\73"+
    "\66\0\1\146\3\0\1\146\7\0\1\147\17\0\1\147"+
    "\54\0\1\10\77\0\110\10\11\0\1\11\76\0\110\11"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\5\6\1\150\11\6\5\0\13\6"+
    "\5\0\3\6\3\0\1\6\1\151\3\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\6\6"+
    "\1\152\4\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\5\6\1\153\11\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\1\154"+
    "\1\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\6\6\1\155\10\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\6\6\1\156\10\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\5\6\1\157"+
    "\5\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\3\6\1\160\13\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\1\161\16\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\2\6\1\161\14\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\6\6\1\162\10\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\2\6\1\163\14\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\4\6\1\164\12\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\165\1\6\20\0\17\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\4\6\1\166\12\6\5\0\3\6\1\167"+
    "\7\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\3\6\1\170"+
    "\7\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\13\6\1\171\3\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\15\6\1\172\1\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\1\173\1\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\5\6\1\174\11\6\5\0\3\6"+
    "\1\175\7\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\4\6\1\176\12\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\2\6\1\177\14\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\7\6"+
    "\1\200\3\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\4\6"+
    "\1\201\6\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\3\6"+
    "\1\202\4\6\1\203\2\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\204\1\6\20\0"+
    "\17\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\5\6\1\205\5\6\7\0\1\145\3\0\3\145\2\0"+
    "\1\206\2\145\1\0\2\72\24\0\1\145\1\0\2\145"+
    "\7\0\1\145\7\0\1\145\1\0\1\145\17\0\1\146"+
    "\3\0\1\146\12\0\3\73\66\0\1\146\3\0\1\146"+
    "\101\0\1\6\1\207\1\6\3\0\5\6\1\0\1\210"+
    "\1\6\1\0\1\211\1\6\1\0\1\212\1\6\20\0"+
    "\3\6\1\213\1\6\1\214\2\6\1\215\6\6\5\0"+
    "\2\6\1\216\5\6\1\217\2\6\5\0\3\6\3\0"+
    "\5\6\1\0\2\6\1\0\2\6\1\0\2\6\20\0"+
    "\10\6\1\220\6\6\5\0\13\6\5\0\3\6\3\0"+
    "\5\6\1\0\1\221\1\6\1\0\2\6\1\0\2\6"+
    "\20\0\17\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\2\6"+
    "\1\222\14\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\5\6"+
    "\1\223\11\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\3\6"+
    "\1\224\13\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\1\225\1\6\1\0\2\6\20\0"+
    "\17\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\2\6\1\226\10\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\3\6\1\227\7\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\3\6\1\230\7\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\7\6\1\231"+
    "\7\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\6\6\1\232\4\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\4\6\1\233\6\6\5\0\3\6\3\0\5\6\1\0"+
    "\1\6\1\234\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\16\6\1\235\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\4\6\1\236\12\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\1\237\1\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\2\6\1\240\10\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\5\6\1\241\11\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\3\6\1\242\7\6"+
    "\5\0\3\6\3\0\5\6\1\0\1\243\1\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\244\1\6\20\0\17\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\1\245"+
    "\1\6\20\0\17\6\5\0\13\6\5\0\3\6\3\0"+
    "\5\6\1\0\2\6\1\0\2\6\1\0\2\6\20\0"+
    "\7\6\1\246\7\6\5\0\13\6\5\0\3\6\3\0"+
    "\5\6\1\0\2\6\1\0\2\6\1\0\2\6\20\0"+
    "\17\6\5\0\1\247\12\6\7\0\1\250\3\0\1\250"+
    "\101\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\3\6\1\251\2\6"+
    "\1\252\4\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\2\6\1\253\14\6"+
    "\5\0\11\6\1\254\1\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\4\6"+
    "\1\255\1\6\1\256\10\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\3\6\1\257\13\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\17\6\5\0\5\6\1\260\1\261\4\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\17\6\5\0\10\6\1\262\2\6\5\0"+
    "\3\6\3\0\5\6\1\0\1\263\1\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\7\6\1\264\7\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\17\6\5\0\4\6\1\265\6\6\5\0\3\6"+
    "\3\0\5\6\1\0\1\266\1\6\1\0\2\6\1\0"+
    "\2\6\20\0\17\6\5\0\13\6\5\0\3\6\3\0"+
    "\5\6\1\0\2\6\1\0\2\6\1\0\1\267\1\6"+
    "\20\0\17\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\3\6\1\270\7\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\271\1\6\20\0"+
    "\17\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\5\6\1\272\5\6\5\0\3\6\3\0\5\6\1\0"+
    "\1\273\1\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\3\6"+
    "\1\274\7\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\275\1\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\2\6\1\276"+
    "\10\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\10\6\1\277\6\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\6\6\1\300\10\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\5\6\1\301"+
    "\5\6\5\0\3\6\3\0\5\6\1\0\1\6\1\302"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\1\6\1\303\11\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\4\6\1\304\6\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\5\6\1\305\11\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\306\1\6\20\0\17\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\6\6\1\307\10\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\7\6\1\310\7\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\2\6\1\311\14\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\1\312\1\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\4\6\1\313\12\6\5\0\13\6\7\0\1\250"+
    "\3\0\1\250\10\0\2\72\67\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\6\6"+
    "\1\314\10\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\2\6"+
    "\1\315\14\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\6\6\1\316\4\6\5\0\3\6\3\0\5\6"+
    "\1\0\1\317\1\6\1\0\2\6\1\0\2\6\20\0"+
    "\17\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\6\6\1\320"+
    "\10\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\5\6\1\321\5\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\6\6\1\322"+
    "\10\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\2\6\1\323"+
    "\14\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\324\1\6\20\0\17\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\3\6"+
    "\1\325\7\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\4\6\1\326\12\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\1\327\1\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\6\6\1\330\10\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\3\6\1\331\13\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\5\6\1\332\11\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\5\6\1\333\11\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\6\6\1\334\10\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\6\6\1\335\10\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\336\1\6\20\0\17\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\2\6\1\337\10\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\4\6\1\340\6\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\341\1\6\20\0\4\6\1\342\12\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\2\6\1\343\14\6\5\0"+
    "\13\6\5\0\3\6\3\0\1\6\1\344\3\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\1\6\1\345\3\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\2\6\1\346\14\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\10\6\1\347"+
    "\2\6\5\0\3\6\3\0\1\6\1\350\3\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\7\6\1\351\7\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\7\6\1\352"+
    "\3\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\10\6\1\353"+
    "\2\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\10\6\1\354\6\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\2\6\1\355\14\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\3\6\1\356\13\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\1\357\1\6\1\0\2\6\20\0\17\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\2\6\1\360\10\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\3\6\1\361\7\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\4\6\1\362\6\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\5\6\1\363\11\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\7\6\1\364\7\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\4\6\1\365\12\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\3\6\1\366\7\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\3\6\1\367\7\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\5\6\1\370\5\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\2\6\1\371\14\6\5\0\13\6"+
    "\5\0\3\6\3\0\3\6\1\372\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\5\6\1\373\11\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\1\374\1\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\17\6\5\0\6\6\1\375\4\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\376\1\6\20\0\17\6\5\0\13\6\5\0\1\6"+
    "\1\377\1\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\13\6\5\0\1\6"+
    "\1\u0100\1\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\1\u0101"+
    "\1\6\20\0\17\6\5\0\13\6\5\0\3\6\3\0"+
    "\5\6\1\0\1\u0102\1\6\1\0\2\6\1\0\2\6"+
    "\20\0\17\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\3\6\1\u0103\7\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\5\6\1\u0104\5\6\5\0\3\6\3\0\5\6"+
    "\1\0\1\u0105\1\6\1\0\2\6\1\0\2\6\20\0"+
    "\17\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\3\6\1\u0106\7\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\2\6\1\u0107\10\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\5\6\1\u0108\5\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\5\6\1\u0109"+
    "\11\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\1\u010a\1\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\3\6"+
    "\1\u010b\7\6\5\0\3\6\3\0\5\6\1\0\1\u010c"+
    "\1\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\u010d\1\6\20\0\17\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\2\6\1\u010e\14\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\3\6\1\u010f\13\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\1\u0110\1\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\5\6\1\u0111\11\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\1\u0112\1\6"+
    "\1\0\2\6\20\0\17\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\17\6\5\0\2\6\1\u0113\10\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\2\6\1\u0114\14\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\6\6\1\u0115\10\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\5\6\1\u0116\11\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\6\6\1\u0117\10\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\6\6\1\u0118\10\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\1\u0119"+
    "\1\6\20\0\17\6\5\0\13\6\5\0\3\6\3\0"+
    "\5\6\1\0\2\6\1\0\2\6\1\0\2\6\20\0"+
    "\17\6\5\0\4\6\1\u011a\6\6\5\0\3\6\3\0"+
    "\1\6\1\u011b\3\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\17\6\5\0\13\6\5\0\3\6\3\0"+
    "\1\6\1\u011c\3\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\20\0\17\6\5\0\13\6\5\0\3\6\3\0"+
    "\5\6\1\0\2\6\1\0\2\6\1\0\1\u011d\1\6"+
    "\20\0\17\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\2\6"+
    "\1\u011e\14\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\1\u011f\1\6\1\0\2\6\1\0\2\6\20\0"+
    "\17\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\1\u0120\1\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\6\6\1\u0121\10\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\4\6\1\u0122\12\6"+
    "\5\0\13\6\5\0\3\6\3\0\1\6\1\u0123\3\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\4\6\1\u0124\12\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\3\6"+
    "\1\u0125\7\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\5\6"+
    "\1\u0126\5\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\5\6\1\u0127\11\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\1\u0128"+
    "\1\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\5\6\1\u0129"+
    "\5\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\3\6\1\u012a"+
    "\7\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\5\6\1\u012b\11\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\5\6\1\u012c"+
    "\5\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\3\6\1\u012d"+
    "\7\6\5\0\1\6\1\u012e\1\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\20\0\17\6\5\0\3\6\1\u012f"+
    "\7\6\5\0\3\6\3\0\5\6\1\0\2\6\1\0"+
    "\2\6\1\0\1\u0130\1\6\20\0\17\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\2\6\1\u0131\14\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\3\6\1\u0132\13\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\2\6\1\u0133\14\6\5\0\13\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\3\6\1\u0134\7\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\20\0\17\6\5\0\2\6\1\u0135\10\6"+
    "\5\0\3\6\3\0\5\6\1\0\2\6\1\0\1\u0136"+
    "\1\6\1\0\2\6\20\0\17\6\5\0\13\6\5\0"+
    "\3\6\3\0\5\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\u0137\1\6\20\0\17\6\5\0\13\6\5\0\3\6"+
    "\3\0\5\6\1\0\1\u0138\1\6\1\0\2\6\1\0"+
    "\2\6\20\0\17\6\5\0\13\6\5\0\3\6\3\0"+
    "\5\6\1\0\1\u0139\1\6\1\0\2\6\1\0\2\6"+
    "\20\0\17\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\4\6\1\u013a\6\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\6\6"+
    "\1\u013b\10\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\5\6\1\u013c\5\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\5\6"+
    "\1\u013d\11\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\2\6\1\u013e\10\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\5\6\1\u013f\5\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\2\6"+
    "\1\u0140\14\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\3\6\1\u0141\7\6\5\0\3\6\3\0\5\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\3\6\1\u0142\7\6\5\0\1\6\1\u0143\1\6"+
    "\3\0\5\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\20\0\17\6\5\0\13\6\5\0\3\6\3\0\5\6"+
    "\1\0\1\u0144\1\6\1\0\2\6\1\0\2\6\20\0"+
    "\17\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\2\6\1\u0145\10\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\2\6\1\u0146\10\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\7\6\1\u0147"+
    "\7\6\5\0\13\6\5\0\3\6\3\0\5\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\20\0\17\6\5\0"+
    "\3\6\1\u0148\7\6\5\0\3\6\3\0\5\6\1\0"+
    "\1\u0149\1\6\1\0\2\6\1\0\2\6\20\0\17\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\4\6\1\u014a\12\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\2\6\1\u014b\14\6"+
    "\5\0\13\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\20\0\17\6\5\0\6\6"+
    "\1\u014c\4\6\5\0\3\6\3\0\5\6\1\0\2\6"+
    "\1\0\1\u014d\1\6\1\0\2\6\20\0\17\6\5\0"+
    "\13\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18864];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\11\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\15\11\24\1\2\0\1\1\1\0"+
    "\1\11\1\1\1\0\1\1\1\0\13\1\1\11\13\1"+
    "\5\11\13\1\1\0\36\1\1\0\41\1\1\0\245\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  OctaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  OctaveLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3936) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 85: 
          { return OctaveTokenTypes.ENUMERATION_KEYWORD;
          }
        case 92: break;
        case 30: 
          { return OctaveTokenTypes.GT;
          }
        case 93: break;
        case 16: 
          { return OctaveTokenTypes.SEMICOLON;
          }
        case 94: break;
        case 5: 
          { return OctaveTokenTypes.IDENTIFIER;
          }
        case 95: break;
        case 87: 
          { return OctaveTokenTypes.ENDPROPERTIES_KEYWORD;
          }
        case 96: break;
        case 73: 
          { return OctaveTokenTypes.FUNCTION_KEYWORD;
          }
        case 97: break;
        case 82: 
          { return OctaveTokenTypes.PROPERTIES_KEYWORD;
          }
        case 98: break;
        case 70: 
          { return OctaveTokenTypes.REALMAX_KEYWORD;
          }
        case 99: break;
        case 32: 
          { return OctaveTokenTypes.OR;
          }
        case 100: break;
        case 84: 
          { return OctaveTokenTypes.ENDCLASSDEF_KEYWORD;
          }
        case 101: break;
        case 27: 
          { return OctaveTokenTypes.TILDE;
          }
        case 102: break;
        case 81: 
          { return OctaveTokenTypes.PERSISTENT_KEYWORD;
          }
        case 103: break;
        case 51: 
          { return OctaveTokenTypes.TRY_KEYWORD;
          }
        case 104: break;
        case 10: 
          { return OctaveTokenTypes.PLUS;
          }
        case 105: break;
        case 9: 
          { return OctaveTokenTypes.E_KEYWORD;
          }
        case 106: break;
        case 22: 
          { return OctaveTokenTypes.RBRACE;
          }
        case 107: break;
        case 49: 
          { return OctaveTokenTypes.NAN_KEYWORD;
          }
        case 108: break;
        case 78: 
          { return OctaveTokenTypes.ENDSWITCH_KEYWORD;
          }
        case 109: break;
        case 39: 
          { return OctaveTokenTypes.NA_KEYWORD;
          }
        case 110: break;
        case 2: 
          { return OctaveTokenTypes.BAD_CHARACTER;
          }
        case 111: break;
        case 56: 
          { return OctaveTokenTypes.FALSE_KEYWORD;
          }
        case 112: break;
        case 62: 
          { return OctaveTokenTypes.ELSEIF_KEYWORD;
          }
        case 113: break;
        case 38: 
          { return OctaveTokenTypes.EQEQ;
          }
        case 114: break;
        case 64: 
          { return OctaveTokenTypes.PARFOR_KEYWORD;
          }
        case 115: break;
        case 53: 
          { return OctaveTokenTypes.TRUE_KEYWORD;
          }
        case 116: break;
        case 25: 
          { return OctaveTokenTypes.DIVISION;
          }
        case 117: break;
        case 88: 
          { return OctaveTokenTypes.ENDENUMERATION_KEYWORD;
          }
        case 118: break;
        case 31: 
          { return OctaveTokenTypes.NOT;
          }
        case 119: break;
        case 36: 
          { return OctaveTokenTypes.PI_KEYWORD;
          }
        case 120: break;
        case 23: 
          { return OctaveTokenTypes.MINUS;
          }
        case 121: break;
        case 24: 
          { return OctaveTokenTypes.MULTIPLICATION;
          }
        case 122: break;
        case 42: 
          { return OctaveTokenTypes.NOTEQ;
          }
        case 123: break;
        case 12: 
          { return OctaveTokenTypes.COMPLEX_LITERAL;
          }
        case 124: break;
        case 21: 
          { return OctaveTokenTypes.LBRACE;
          }
        case 125: break;
        case 40: 
          { return OctaveTokenTypes.LE;
          }
        case 126: break;
        case 80: 
          { return OctaveTokenTypes.ENDMETHODS_KEYWORD;
          }
        case 127: break;
        case 54: 
          { return OctaveTokenTypes.CASE_KEYWORD;
          }
        case 128: break;
        case 20: 
          { return OctaveTokenTypes.RBRACKET;
          }
        case 129: break;
        case 13: 
          { return OctaveTokenTypes.SPACE;
          }
        case 130: break;
        case 57: 
          { return OctaveTokenTypes.BREAK_KEYWORD;
          }
        case 131: break;
        case 7: 
          { return OctaveTokenTypes.STRING;
          }
        case 132: break;
        case 65: 
          { return OctaveTokenTypes.STATIC_KEYWORD;
          }
        case 133: break;
        case 55: 
          { return OctaveTokenTypes.ENDIF_KEYWORD;
          }
        case 134: break;
        case 66: 
          { return OctaveTokenTypes.SWITCH_KEYWORD;
          }
        case 135: break;
        case 41: 
          { return OctaveTokenTypes.GE;
          }
        case 136: break;
        case 83: 
          { return OctaveTokenTypes.ENDFUNCTION_KEYWORD;
          }
        case 137: break;
        case 26: 
          { return OctaveTokenTypes.POWER;
          }
        case 138: break;
        case 61: 
          { return OctaveTokenTypes.ENDFOR_KEYWORD;
          }
        case 139: break;
        case 28: 
          { return OctaveTokenTypes.COLON;
          }
        case 140: break;
        case 46: 
          { return OctaveTokenTypes.EPS_KEYWORD;
          }
        case 141: break;
        case 3: 
          { return OctaveTokenTypes.FORMFEED;
          }
        case 142: break;
        case 45: 
          { return OctaveTokenTypes.HEX_INTEGER;
          }
        case 143: break;
        case 33: 
          { return OctaveTokenTypes.AND;
          }
        case 144: break;
        case 59: 
          { return OctaveTokenTypes.UNTIL_KEYWORD;
          }
        case 145: break;
        case 19: 
          { return OctaveTokenTypes.LBRACKET;
          }
        case 146: break;
        case 34: 
          { return OctaveTokenTypes.FLOAT_NUMBER_LITERAL;
          }
        case 147: break;
        case 15: 
          { return OctaveTokenTypes.EQ;
          }
        case 148: break;
        case 6: 
          { return OctaveTokenTypes.INTEGER_LITERAL;
          }
        case 149: break;
        case 35: 
          { return OctaveTokenTypes.DO_KEYWORD;
          }
        case 150: break;
        case 90: 
          { return OctaveTokenTypes.END_UNWIND_PROTECT_KEYWORD;
          }
        case 151: break;
        case 60: 
          { return OctaveTokenTypes.WHILE_KEYWORD;
          }
        case 152: break;
        case 18: 
          { return OctaveTokenTypes.RPAR;
          }
        case 153: break;
        case 76: 
          { return OctaveTokenTypes.ENDEVENTS_KEYWORD;
          }
        case 154: break;
        case 86: 
          { return OctaveTokenTypes.END_TRY_CATCH_KEYWORD;
          }
        case 155: break;
        case 79: 
          { return OctaveTokenTypes.OTHERWISE_KEYWORD;
          }
        case 156: break;
        case 11: 
          { return OctaveTokenTypes.COMMA;
          }
        case 157: break;
        case 52: 
          { return OctaveTokenTypes.ELSE_KEYWORD;
          }
        case 158: break;
        case 44: 
          { return OctaveTokenTypes.DOUBLE_AND;
          }
        case 159: break;
        case 91: 
          { return OctaveTokenTypes.UNWIND_PROTECT_CLEANUP_KEYWORD;
          }
        case 160: break;
        case 14: 
          { return OctaveTokenTypes.TAB;
          }
        case 161: break;
        case 75: 
          { return OctaveTokenTypes.CONTINUE_KEYWORD;
          }
        case 162: break;
        case 74: 
          { return OctaveTokenTypes.CLASSDEF_KEYWORD;
          }
        case 163: break;
        case 17: 
          { return OctaveTokenTypes.LPAR;
          }
        case 164: break;
        case 47: 
          { return OctaveTokenTypes.END_KEYWORD;
          }
        case 165: break;
        case 1: 
          { return OctaveTokenTypes.LINE_BREAK;
          }
        case 166: break;
        case 48: 
          { return OctaveTokenTypes.INF_KEYWORD;
          }
        case 167: break;
        case 50: 
          { return OctaveTokenTypes.FOR_KEYWORD;
          }
        case 168: break;
        case 68: 
          { return OctaveTokenTypes.GLOBAL_KEYWORD;
          }
        case 169: break;
        case 72: 
          { return OctaveTokenTypes.ENDWHILE_KEYWORD;
          }
        case 170: break;
        case 29: 
          { return OctaveTokenTypes.LT;
          }
        case 171: break;
        case 4: 
          { return OctaveTokenTypes.COMMENT;
          }
        case 172: break;
        case 89: 
          { return OctaveTokenTypes.UNWIND_PROTECT_KEYWORD;
          }
        case 173: break;
        case 58: 
          { return OctaveTokenTypes.CATCH_KEYWORD;
          }
        case 174: break;
        case 37: 
          { return OctaveTokenTypes.IF_KEYWORD;
          }
        case 175: break;
        case 77: 
          { return OctaveTokenTypes.ENDPARFOR_KEYWORD;
          }
        case 176: break;
        case 63: 
          { return OctaveTokenTypes.EVENTS_KEYWORD;
          }
        case 177: break;
        case 71: 
          { return OctaveTokenTypes.METHODS_KEYWORD;
          }
        case 178: break;
        case 43: 
          { return OctaveTokenTypes.DOUBLE_OR;
          }
        case 179: break;
        case 8: 
          { return OctaveTokenTypes.DOT;
          }
        case 180: break;
        case 67: 
          { return OctaveTokenTypes.RETURN_KEYWORD;
          }
        case 181: break;
        case 69: 
          { return OctaveTokenTypes.REALMIN_KEYWORD;
          }
        case 182: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
