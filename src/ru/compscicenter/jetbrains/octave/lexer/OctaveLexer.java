/* The following code was generated by JFlex 1.4.3 on 11/25/14 6:40 PM */

package ru.compscicenter.jetbrains.octave.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.compscicenter.jetbrains.octave.lexer.OctaveTokenTypes;
import com.intellij.psi.TokenType;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/25/14 6:40 PM from the specification file
 * <tt>./Octave.flex</tt>
 */
class OctaveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\1\1\0\1\3\1\2\22\0\1\43\1\105\1\14"+
    "\1\5\1\0\1\4\1\63\1\13\1\72\1\73\1\65\1\46\1\71"+
    "\1\26\1\23\1\66\1\12\7\16\2\16\1\77\1\70\1\103\1\62"+
    "\1\104\1\0\1\100\1\102\3\20\1\25\1\20\1\44\1\10\1\32"+
    "\4\10\1\101\1\10\1\30\7\10\1\22\2\10\1\74\1\15\1\75"+
    "\1\67\1\11\1\0\1\50\1\47\1\53\1\17\1\24\1\45\1\42"+
    "\1\34\1\31\1\57\1\51\1\40\1\54\1\41\1\35\1\27\1\55"+
    "\1\36\1\33\1\37\1\56\1\52\1\106\1\21\1\60\1\10\1\7"+
    "\1\64\1\6\1\76\53\0\1\10\12\0\1\10\4\0\1\10\5\0"+
    "\27\10\1\0\7\10\30\10\1\0\10\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\2\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\2\10\1\10\1\10\1\10\1\10\3\10"+
    "\2\10\1\10\1\10\1\10\2\10\1\10\3\10\2\10\4\10\1\10"+
    "\2\10\1\10\3\10\3\10\2\10\1\10\2\10\1\10\1\10\1\10"+
    "\1\10\1\10\2\10\1\10\1\10\2\10\1\10\1\10\2\10\1\10"+
    "\3\10\1\10\1\10\1\10\2\10\2\10\1\10\1\10\3\10\4\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\2\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\2\10\1\10\1\10\1\10\1\10\1\10\3\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\7\10\2\10\1\10"+
    "\2\10\2\10\1\10\1\10\4\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\105\10\1\10\33\10\22\10\4\0\14\10\16\0"+
    "\5\10\7\0\1\10\1\0\1\10\201\0\1\10\1\10\1\10\1\10"+
    "\1\10\1\0\1\10\1\10\2\0\1\10\3\10\10\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\10\21\10\1\0\11\10\43\10"+
    "\1\10\2\10\3\10\3\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\5\10\1\10\1\10"+
    "\1\0\1\10\1\10\2\10\2\10\63\10\60\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\10\0\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\2\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\11\0\46\10"+
    "\2\0\1\10\7\0\47\10\110\0\33\10\5\0\3\10\55\0\40\10"+
    "\1\10\12\10\43\0\2\10\1\0\143\10\1\0\1\10\17\0\2\10"+
    "\7\0\2\10\12\0\3\10\2\0\1\10\20\0\1\10\1\0\36\10"+
    "\35\0\131\10\13\0\1\10\30\0\41\10\11\0\2\10\4\0\1\10"+
    "\5\0\26\10\4\0\1\10\11\0\1\10\3\0\1\10\27\0\31\10"+
    "\107\0\1\10\1\0\13\10\127\0\66\10\3\0\1\10\22\0\1\10"+
    "\7\0\12\10\17\0\1\10\6\10\1\0\7\10\5\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0"+
    "\1\10\20\0\1\10\15\0\2\10\1\0\3\10\16\0\2\10\23\0"+
    "\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\2\10\1\0\2\10\37\0\4\10\1\0\1\10\23\0\3\10\20\0"+
    "\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\3\0\1\10\22\0\1\10\17\0\2\10\43\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0"+
    "\1\10\36\0\2\10\1\0\3\10\17\0\1\10\21\0\1\10\1\0"+
    "\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0"+
    "\2\10\3\0\2\10\3\0\3\10\3\0\14\10\26\0\1\10\64\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0"+
    "\1\10\32\0\2\10\6\0\2\10\43\0\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\12\10\1\0\5\10\3\0\1\10\40\0\1\10\1\0"+
    "\2\10\17\0\2\10\22\0\10\10\1\0\3\10\1\0\51\10\2\0"+
    "\1\10\20\0\1\10\21\0\2\10\30\0\6\10\5\0\22\10\3\0"+
    "\30\10\1\0\11\10\1\0\1\10\2\0\7\10\72\0\60\10\1\0"+
    "\2\10\14\0\6\10\1\10\72\0\2\10\1\0\1\10\2\0\2\10"+
    "\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10"+
    "\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\0\2\10"+
    "\11\0\1\10\2\0\5\10\1\0\1\10\25\0\4\10\40\0\1\10"+
    "\77\0\10\10\1\0\44\10\33\0\5\10\163\0\53\10\24\0\1\10"+
    "\20\0\6\10\4\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10"+
    "\4\0\15\10\14\0\1\10\21\0\46\10\1\0\1\10\5\0\1\10"+
    "\2\0\53\10\1\0\1\10\u014c\10\1\0\4\10\2\0\7\10\1\0"+
    "\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0"+
    "\71\10\1\0\4\10\2\0\103\10\45\0\20\10\20\0\125\10\14\0"+
    "\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\3\0\3\10\17\0"+
    "\15\10\1\0\4\10\16\0\22\10\16\0\22\10\16\0\15\10\1\0"+
    "\3\10\17\0\64\10\43\0\1\10\4\0\1\10\103\0\43\10\1\10"+
    "\64\10\10\0\51\10\1\0\1\10\5\0\106\10\12\0\35\10\63\0"+
    "\36\10\2\0\5\10\13\0\54\10\25\0\7\10\70\0\27\10\11\0"+
    "\65\10\122\0\1\10\135\0\57\10\21\0\7\10\67\0\36\10\15\0"+
    "\2\10\12\0\54\10\32\0\44\10\51\0\3\10\12\0\36\10\6\10"+
    "\153\0\4\10\1\0\4\10\3\0\2\10\11\0\54\10\77\10\15\10"+
    "\1\10\42\10\45\10\100\0\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\11\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\11\10\10\10\6\10\2\0\6\10\2\0\10\10\10\10\10\10"+
    "\10\10\6\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\10\10\10\10\16\10\2\0\10\10\10\10"+
    "\10\10\10\10\10\10\10\10\5\10\1\0\2\10\4\10\1\10\1\0"+
    "\1\10\3\0\3\10\1\0\2\10\4\10\1\10\3\0\4\10\2\0"+
    "\2\10\4\10\4\0\10\10\5\10\5\0\3\10\1\0\2\10\4\10"+
    "\1\10\164\0\1\10\15\0\1\10\20\0\15\10\145\0\1\10\4\0"+
    "\1\10\2\0\1\10\3\10\2\10\3\10\1\10\1\0\1\10\3\0"+
    "\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0"+
    "\1\10\4\10\1\10\4\10\1\10\2\0\2\10\2\10\5\0\1\10"+
    "\4\10\4\0\1\10\21\0\43\10\1\10\1\10\4\10\u0a77\0\57\10"+
    "\1\0\57\10\1\0\1\10\1\10\3\10\2\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\4\10\1\10\1\10\2\10\1\10\6\10\2\10"+
    "\3\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\10"+
    "\6\0\1\10\1\10\1\10\1\10\3\0\1\10\1\10\14\0\46\10"+
    "\1\0\1\10\5\0\1\10\2\0\70\10\7\0\1\10\20\0\27\10"+
    "\11\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\120\0\1\10\u01d5\0\1\10"+
    "\1\10\1\10\31\0\11\10\7\0\5\10\2\0\3\10\1\10\1\10"+
    "\4\0\126\10\6\0\2\10\1\10\1\0\132\10\1\0\3\10\1\10"+
    "\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10"+
    "\112\0\u51cd\10\63\0\25\10\1\10\u0477\10\103\0\50\10\6\10\2\0"+
    "\u010c\10\1\10\3\0\20\10\12\0\2\10\24\0\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\20\0\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\10\0\106\10\12\10\47\0\11\10\2\0\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\3\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\1\10\1\10\10\10\1\10\1\10\1\10\1\10\2\10\1\10"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\2\0"+
    "\1\10\1\10\1\10\1\10\1\0\1\10\1\10\1\10\1\10\14\0"+
    "\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10\1\10"+
    "\1\10\115\0\2\10\1\10\7\10\1\0\3\10\1\0\4\10\1\0"+
    "\27\10\35\0\64\10\16\0\62\10\76\0\6\10\3\0\1\10\16\0"+
    "\34\10\12\0\27\10\31\0\35\10\7\0\57\10\34\0\1\10\60\0"+
    "\51\10\27\0\3\10\1\0\10\10\24\0\20\10\1\10\6\10\3\0"+
    "\1\10\5\0\60\10\1\0\1\10\3\0\2\10\2\0\5\10\2\0"+
    "\1\10\1\0\1\10\30\0\2\10\1\10\2\0\13\10\7\0\1\10"+
    "\2\10\14\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0"+
    "\7\10\221\0\43\10\35\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0"+
    "\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10\1\0"+
    "\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0"+
    "\14\10\164\0\5\10\1\0\207\10\44\0\32\10\6\0\32\10\13\0"+
    "\12\10\1\10\55\10\2\10\37\10\3\0\6\10\2\0\6\10\2\0"+
    "\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\10\1\7\1\13\1\14"+
    "\1\15\12\7\1\16\1\7\1\17\5\7\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\7\1\40"+
    "\1\41\1\42\1\7\3\4\3\0\1\43\1\0\1\44"+
    "\1\0\1\45\2\0\1\45\1\0\1\46\1\10\1\47"+
    "\1\50\1\0\1\51\1\52\1\53\1\54\1\55\4\7"+
    "\1\56\1\57\1\7\1\60\3\7\1\61\13\7\1\62"+
    "\1\63\10\7\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\7\1\75\1\76\1\77\1\7"+
    "\1\0\1\4\1\0\1\4\1\0\1\100\2\43\1\0"+
    "\1\43\2\0\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\7\1\107\5\7\1\110\7\7\1\111\1\112\1\7"+
    "\1\113\7\7\1\114\10\7\5\0\2\43\1\16\1\115"+
    "\24\7\1\116\11\7\1\0\1\7\1\117\6\7\1\4"+
    "\5\0\7\7\1\120\15\7\1\0\5\7\1\121\1\7"+
    "\1\122\1\0\2\7\1\123\1\0\1\7\1\124\1\7"+
    "\1\0\1\125\1\7\1\126\3\0\1\127\7\7\1\130"+
    "\5\7\1\131\2\7\1\132\1\133\1\134\2\0\1\7"+
    "\1\135\2\7\1\136\2\7\12\0\2\7\1\0\2\7"+
    "\1\0\17\7\1\114\2\0\1\7\1\137\1\140\1\0"+
    "\1\7\1\114\11\0\2\7\1\0\1\7\1\141\1\114"+
    "\1\0\13\7\1\142\4\7\12\0\1\143\7\0\1\7"+
    "\1\144\1\0\1\145\4\7\1\146\1\7\1\147\1\150"+
    "\6\7\1\151\16\0\2\114\7\7\1\152\1\7\1\153"+
    "\1\154\1\114\1\0\1\114\6\0\1\114\5\7\1\155"+
    "\1\156\1\157\1\0\1\114\2\0\5\7\3\0\1\7"+
    "\1\160\2\7\1\161\1\114\1\0\2\7\1\162\2\0"+
    "\1\163\1\7\1\0\5\7\1\164\4\7\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\107\0\325\0\u011c\0\107\0\107"+
    "\0\u0163\0\u01aa\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354"+
    "\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\107\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\u0ad1\0\107\0\107\0\u0b18\0\u0b5f\0\u0ba6\0\u0ad1"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde"+
    "\0\u0e25\0\107\0\u01f1\0\u0e6c\0\u0eb3\0\u0238\0\u0efa\0\u0f41"+
    "\0\107\0\u0f88\0\u0163\0\107\0\u0fcf\0\u1016\0\u105d\0\u10a4"+
    "\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\107\0\107"+
    "\0\u1295\0\u0163\0\u12dc\0\u1323\0\u136a\0\u0163\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\107\0\107\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\u18f6\0\u0163\0\107\0\107"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e"+
    "\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\107\0\107\0\107"+
    "\0\107\0\107\0\u0163\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u0163\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u0163\0\u0163\0\u20ba\0\u2101\0\u2148\0\u218f"+
    "\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7"+
    "\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff"+
    "\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\107\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u0163\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u0163"+
    "\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\107\0\u3233"+
    "\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b"+
    "\0\u34b2\0\u34f9\0\u3540\0\u0163\0\u3587\0\u35ce\0\u3615\0\u365c"+
    "\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894"+
    "\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u0163"+
    "\0\u3acc\0\u0163\0\u3b13\0\u3b5a\0\u3ba1\0\u0163\0\u3be8\0\u3c2f"+
    "\0\u0163\0\u3c76\0\u3cbd\0\u0163\0\u3d04\0\u0163\0\u3d4b\0\u3d92"+
    "\0\u3dd9\0\u0163\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83"+
    "\0\u3fca\0\u0163\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u0163"+
    "\0\u4174\0\u41bb\0\u0163\0\u0163\0\u0163\0\u4202\0\u4249\0\u4290"+
    "\0\u0163\0\u42d7\0\u431e\0\u0163\0\u4365\0\u43ac\0\u43f3\0\u443a"+
    "\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b\0\u4672"+
    "\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa"+
    "\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2"+
    "\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a"+
    "\0\u4d61\0\u0163\0\u0163\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4"+
    "\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc"+
    "\0\u5143\0\u518a\0\u51d1\0\u0163\0\u5218\0\u525f\0\u52a6\0\u52ed"+
    "\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497\0\u54de\0\u5525"+
    "\0\u556c\0\u0163\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716"+
    "\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u594e"+
    "\0\u0163\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f"+
    "\0\u5b86\0\u0163\0\u5bcd\0\u0163\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9"+
    "\0\u0163\0\u5d30\0\u0163\0\u0163\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c"+
    "\0\u5e93\0\u5eda\0\u0163\0\u5f21\0\u5f68\0\u5faf\0\u5ff6\0\u603d"+
    "\0\u6084\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u622e\0\u6275"+
    "\0\u62bc\0\u6303\0\107\0\u634a\0\u6391\0\u63d8\0\u641f\0\u6466"+
    "\0\u64ad\0\u64f4\0\u0163\0\u653b\0\u0163\0\u0163\0\u6582\0\u65c9"+
    "\0\u6610\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773\0\u67ba\0\u6801"+
    "\0\u6848\0\u688f\0\u68d6\0\u691d\0\u6964\0\u0163\0\u0163\0\u0163"+
    "\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e\0\u6b55\0\u6b9c"+
    "\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8\0\u6cff\0\u0163\0\u6d46\0\u6d8d"+
    "\0\u0163\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9\0\u0163\0\u6ef0\0\u6f37"+
    "\0\u6f7e\0\u6fc5\0\u700c\0\u7053\0\u709a\0\u70e1\0\u7128\0\u716f"+
    "\0\u0163\0\u71b6\0\u71fd\0\u7244\0\u728b\0\u0163";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\2\11\1\12\1\13\1\14\1\15\1\16\1\17\3\11"+
    "\1\20\1\21\1\11\1\22\1\23\1\11\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\11\1\33\1\34"+
    "\1\35\1\11\1\36\1\37\1\40\1\41\2\11\1\42"+
    "\1\43\1\11\1\44\2\11\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\11\1\66\1\67"+
    "\1\70\1\71\110\0\1\3\105\0\1\72\2\0\4\72"+
    "\1\73\100\72\2\0\4\72\1\74\77\72\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\12\0\1\75"+
    "\3\0\1\76\2\0\2\77\1\100\2\101\3\0\2\102"+
    "\54\0\1\103\2\0\10\103\1\104\1\103\1\105\71\103"+
    "\1\106\2\0\11\106\1\107\1\110\71\106\62\0\1\111"+
    "\36\0\1\112\3\0\1\16\4\0\1\100\2\101\3\0"+
    "\2\102\64\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\6\11\1\113\5\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\12\0\1\100\2\0\1\114\1\100"+
    "\4\0\1\115\2\0\1\116\17\0\1\117\16\0\1\120"+
    "\1\121\1\122\27\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\1\123\10\11\1\124\1\125\1\11\1\0\2\11"+
    "\1\0\3\11\1\126\6\11\20\0\2\11\3\0\1\11"+
    "\26\0\1\127\33\0\1\130\34\0\3\11\3\0\5\11"+
    "\1\0\1\131\1\11\1\0\2\11\1\132\4\11\1\133"+
    "\4\11\1\0\2\11\1\0\1\11\1\134\10\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\12\11\1\135\1\11\1\0\1\11\1\136"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\12\11\1\135\1\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\10\11"+
    "\1\137\3\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\140\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\6\11\1\141\5\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\142\3\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\143\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\7\11\1\144"+
    "\4\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\1\11\1\145\10\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\11\11\1\146\2\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\43\0\1\35\53\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\6\11\1\147"+
    "\5\11\1\0\2\11\1\0\1\11\1\150\5\11\1\151"+
    "\2\11\20\0\2\11\3\0\1\11\46\0\1\152\13\0"+
    "\1\153\34\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\7\11\1\154\4\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\3\11\1\155"+
    "\1\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\6\11\1\156\2\11\1\157"+
    "\2\11\1\0\2\11\1\0\1\11\1\160\10\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\161\1\11\1\0\6\11\1\162\5\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\12\11\1\163\1\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\62\0\1\164\106\0\1\165\1\166\105\0\1\167\1\0"+
    "\1\170\104\0\1\171\2\0\1\53\103\0\1\172\106\0"+
    "\1\173\106\0\1\174\34\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\1\11\1\175"+
    "\10\11\20\0\1\11\1\176\3\0\1\11\62\0\1\177"+
    "\21\0\1\174\64\0\1\200\34\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\5\11\1\201\6\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\1\72\2\0"+
    "\104\72\1\73\2\202\1\73\1\203\102\73\1\74\2\204"+
    "\2\74\1\205\101\74\12\0\1\75\3\0\1\76\2\0"+
    "\2\206\1\100\2\101\3\0\2\102\66\0\1\75\3\0"+
    "\1\76\4\0\1\100\2\101\3\0\2\102\66\0\1\207"+
    "\3\0\3\207\3\0\2\207\17\0\1\207\1\0\2\207"+
    "\2\0\1\207\26\0\1\207\16\0\1\210\3\0\1\211"+
    "\4\0\1\212\2\101\3\0\2\102\66\0\1\213\3\0"+
    "\1\213\7\0\1\214\17\0\1\214\53\0\1\103\73\0"+
    "\107\103\14\0\1\106\72\0\107\106\12\0\1\112\3\0"+
    "\1\16\2\0\2\206\1\100\2\101\3\0\2\102\77\0"+
    "\1\215\145\0\1\216\106\0\1\217\106\0\1\220\2\0"+
    "\1\122\103\0\1\221\106\0\1\222\34\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\1\223\7\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\1\224"+
    "\7\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\1\11\1\225\3\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\7\11\1\226"+
    "\2\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\227\1\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\7\11\1\230\4\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\6\11"+
    "\1\231\5\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\7\11\1\232\4\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\1\11\1\233\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\1\11\1\234\10\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\235"+
    "\11\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\11\11\1\236\2\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\5\11\1\237\6\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\10\11\1\240\3\11\1\0"+
    "\2\11\1\0\1\11\1\241\10\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\7\11\1\242\1\11\1\243"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\12\11\1\244\1\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\6\11\1\245\5\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\7\11"+
    "\1\246\4\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\11\11\1\247\2\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\12\11\1\250\1\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\251\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\252"+
    "\11\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\11\11\1\253\1\254\1\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\255\1\11\1\0\14\11\1\0\1\11\1\256"+
    "\1\0\1\11\1\257\10\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\1\260\3\11\1\261\3\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\262\3\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\7\11\1\263\4\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\10\11"+
    "\1\264\3\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\265\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\20\0\1\244"+
    "\1\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\266\11\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\4\202\1\267\102\202"+
    "\1\73\2\202\3\73\1\72\100\73\5\204\1\270\101\204"+
    "\1\74\2\204\3\74\1\72\100\74\12\0\1\271\3\0"+
    "\3\271\3\0\2\271\17\0\1\271\1\0\2\271\2\0"+
    "\1\271\26\0\1\271\16\0\1\207\3\0\3\207\2\0"+
    "\1\272\2\207\1\0\2\101\14\0\1\207\1\0\2\207"+
    "\2\0\1\207\26\0\1\207\16\0\1\210\3\0\1\211"+
    "\2\0\2\206\1\273\2\101\3\0\2\102\66\0\1\210"+
    "\3\0\1\211\4\0\1\273\2\101\3\0\2\102\66\0"+
    "\1\273\3\0\1\273\102\0\1\274\3\0\1\275\4\0"+
    "\1\212\5\0\2\102\66\0\1\213\3\0\1\213\71\0"+
    "\1\276\115\0\3\11\3\0\5\11\1\0\1\277\1\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\1\11\1\300\1\11\3\0\5\11"+
    "\1\0\1\301\1\11\1\0\1\302\1\11\1\303\1\11"+
    "\1\304\7\11\1\0\1\11\1\305\1\0\4\11\1\306"+
    "\1\307\4\11\20\0\2\11\3\0\1\310\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\14\11\1\0\2\11"+
    "\1\0\5\11\1\311\4\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\12\11"+
    "\1\312\1\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\1\313\7\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\1\314\13\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\1\11\1\315"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\10\11\1\316\3\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\10\11"+
    "\1\317\3\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\1\11\1\320\3\11"+
    "\1\0\2\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\321\1\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\7\11\1\322\2\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\11\11\1\323"+
    "\2\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\1\324\1\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\1\325\11\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\5\11\1\326"+
    "\4\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\4\11\1\327\7\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\4\11\1\330\5\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\1\11\1\331\10\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\4\11\1\332\7\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\6\11\1\333\5\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\10\11\1\334"+
    "\3\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\1\11\1\335\10\11\20\0"+
    "\2\11\3\0\1\11\3\0\1\336\4\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\336\2\11\1\0"+
    "\12\11\1\336\17\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\1\337\7\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\340\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\4\11\1\341\5\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\5\11\1\342\6\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\343\1\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\344\11\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\2\11"+
    "\1\345\11\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\11\11\1\346\2\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\6\202\1\347\100\202\6\204"+
    "\1\347\100\204\12\0\1\271\3\0\3\271\2\0\1\350"+
    "\2\271\1\0\2\351\14\0\1\271\1\0\2\271\2\0"+
    "\1\271\26\0\1\271\16\0\1\352\3\0\1\352\102\0"+
    "\1\353\3\0\1\354\4\0\1\212\2\351\3\0\2\102"+
    "\66\0\1\274\3\0\1\275\2\0\2\206\1\273\2\351"+
    "\3\0\2\102\66\0\1\274\3\0\1\275\4\0\1\273"+
    "\2\351\3\0\2\102\64\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\355\11\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\10\11\1\356\3\11\1\0"+
    "\2\11\1\0\7\11\1\357\2\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\12\11\1\360\1\11\1\0\2\11\1\0\3\11\1\361"+
    "\6\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\7\11\1\362\4\11\1\0"+
    "\2\11\1\0\1\11\1\363\10\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\1\11\1\364\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\365\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\6\11\1\366\5\11\1\0\2\11\1\0\7\11"+
    "\1\367\2\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\11\11\1\370\2\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\371\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\5\11\1\372\6\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\373\1\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\374\3\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\375\11\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\376\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\6\11\1\377\5\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\u0100\11\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\4\11\1\u0101\5\11\20\0\2\11\3\0\1\11\3\0"+
    "\1\u0102\4\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\u0102\2\11\1\0\12\11\1\u0102\17\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\7\11\1\u0103\4\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\7\11\1\u0104\4\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\14\11\1\0\2\11"+
    "\1\0\5\11\1\u0105\4\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\1\11\1\u0106\10\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\1\11\1\u0107\10\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\u0108\1\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\10\11\1\u0109\3\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\2\11\1\u010a\7\11\20\0\2\11\3\0"+
    "\1\11\3\0\1\u010b\4\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\u010b\2\11\1\0\12\11\1\u010b"+
    "\17\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\7\11\1\u010c\4\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\2\11\1\u010d\11\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\7\11"+
    "\1\u010e\4\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\3\0\1\336\32\0\1\u010f\4\0\1\336"+
    "\15\0\1\336\35\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\1\u0110\7\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\5\11\1\u0111\6\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\6\11\1\u0112\5\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\3\0\1\u0113\4\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\u0113\2\11\1\0\12\11\1\u0113\17\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\11\11\1\u0114\2\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\12\11\1\u0115\1\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\u0116\1\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\12\0\1\u0117\3\0\1\u0117\102\0\1\u0118\3\0\1\u0118"+
    "\7\0\1\u0119\17\0\1\u0119\52\0\1\352\3\0\1\352"+
    "\10\0\2\101\70\0\1\353\3\0\1\354\2\0\2\206"+
    "\1\273\2\351\3\0\2\102\66\0\1\353\3\0\1\354"+
    "\4\0\1\273\2\351\3\0\2\102\64\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\1\11\1\u011a"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\7\11\1\u011b\4\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\12\11"+
    "\1\u011c\1\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\7\11\1\u011d\2\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\1\u011e\1\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\6\11\1\u011f\5\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\7\11\1\u0120"+
    "\4\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\2\11\1\u0121\11\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\7\11\1\u0122\4\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\12\11\1\u0123\1\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\1\11\1\u0124\10\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\10\11\1\u0125\3\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\2\11\1\u0126\11\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\7\11\1\u0127\4\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\4\11\1\u0128"+
    "\7\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\4\11\1\u0129\7\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\7\11\1\u012a\4\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\7\11\1\u012b\4\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\4\11\1\u012c\5\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\5\11\1\u012d\6\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\3\0\1\u0102\31\0\1\u012e\5\0"+
    "\1\u0102\4\0\1\u012f\10\0\1\u0102\35\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\u0130\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\12\11\1\u0131\1\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\u0132"+
    "\11\11\1\0\2\11\1\0\1\11\1\u0133\10\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\11\11\1\u0134\2\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\10\11\1\u0135\3\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\2\11\1\u0136"+
    "\11\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\3\0\1\u010b\15\0\1\u0137\2\0\1\u0138\4\0"+
    "\1\u0139\1\0\1\u013a\1\0\1\u013b\1\0\1\u013c\1\u013d"+
    "\1\u013e\1\0\1\u010b\4\0\1\u013f\3\0\1\u0140\4\0"+
    "\1\u010b\35\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\5\11\1\u0141\4\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\12\11\1\u0142\1\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\24\0\1\u0143\72\0"+
    "\3\11\3\0\1\11\1\u0144\3\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\1\11\1\u0145\3\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\3\0\1\u0113\31\0\1\u0146\5\0"+
    "\1\u0113\15\0\1\u0113\35\0\3\11\3\0\1\11\1\u0147"+
    "\3\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\12\0\1\u0117\3\0"+
    "\1\u0117\10\0\2\351\70\0\1\353\3\0\1\354\4\0"+
    "\1\212\5\0\2\102\66\0\1\u0118\3\0\1\u0118\100\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\11\11\1\u0148\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\u0149"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\5\11\1\u014a\4\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\12\11\1\u014b\1\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\1\u014c\13\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\1\11\1\u014d"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\10\11\1\u014e\3\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\4\11\1\u014f\5\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\1\u0150\7\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\5\11\1\u0151\6\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\11\11\1\u0152\2\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\1\11\1\u0153\10\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\10\11\1\u0154\3\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\10\11\1\u0155\3\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\41\0\1\u0156"+
    "\3\0\1\u0157\101\0\1\u0158\56\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\2\11\1\u0159\11\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\12\11\1\u015a\1\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\3\11\1\u015b\1\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\3\0\1\u015c\4\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\u015c\2\11\1\0\12\11"+
    "\1\u015c\17\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\6\11\1\u015d\5\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\60\0"+
    "\1\u015e\103\0\1\u015f\105\0\1\u0160\2\0\1\u015e\104\0"+
    "\1\u0161\72\0\1\u015e\3\0\1\u0162\72\0\1\u0163\125\0"+
    "\1\u0164\73\0\1\u0165\127\0\1\u0166\100\0\1\u0167\46\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\1\11\1\u0168\10\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\7\11\1\u0169\2\11\20\0"+
    "\2\11\3\0\1\11\33\0\1\u016a\63\0\3\11\3\0"+
    "\5\11\1\0\1\u016b\1\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\4\11\1\u016c\7\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\41\0\1\u016d\3\0\1\u016e\51\0\1\11\1\u016f\1\11"+
    "\3\0\5\11\1\0\2\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\1\11"+
    "\1\u0170\1\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\2\11"+
    "\1\u0171\11\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\1\u0172"+
    "\1\11\1\0\14\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\10\11\1\u0173\3\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\u0174\1\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\6\11\1\u0175\5\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\4\11\1\u0176\5\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\10\11\1\u0177\3\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\1\u0178\7\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\6\11\1\u0179\5\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\u017a\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\10\11\1\u017b\3\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\1\u017c\1\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\2\11\1\u017d\11\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\3\0\1\u0102"+
    "\37\0\1\u0102\15\0\1\u0102\72\0\1\u0156\101\0\1\u0156"+
    "\56\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\1\u017e\7\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\3\0\1\u015c\17\0\1\u017f\2\0\1\u0180"+
    "\4\0\1\u0181\1\u0182\1\0\1\u0183\1\0\1\u0184\1\u0185"+
    "\1\0\1\u015c\1\0\1\u0186\1\u0180\1\u0187\3\0\1\u0188"+
    "\5\0\1\u015c\35\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\12\11\1\u0189\1\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\3\0\1\u010b\37\0\1\u010b"+
    "\15\0\1\u010b\103\0\1\u018a\100\0\1\u018b\114\0\1\u018c"+
    "\75\0\1\u015e\103\0\1\u018d\10\0\1\u015e\102\0\1\u018e"+
    "\75\0\1\u018f\1\0\1\u013d\105\0\1\u0190\110\0\1\u015f"+
    "\55\0\3\11\3\0\5\11\1\0\2\11\1\0\1\u0191"+
    "\13\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\1\u0192\1\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\24\0\1\u0193\72\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\14\11\1\0\1\11\1\u0194\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\3\0\1\u0113\37\0"+
    "\1\u0113\15\0\1\u0113\72\0\1\u016d\51\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\1\u0195\13\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\14\11\1\0\2\11"+
    "\1\0\4\11\1\u0196\5\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\12\11"+
    "\1\u0197\1\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\7\11\1\u0198\4\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\4\11\1\u0199\7\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\7\11\1\u019a\4\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\7\11"+
    "\1\u019b\4\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\5\11\1\u019c\6\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\2\11\1\u019d\11\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\1\11\1\u019e\3\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\1\11\1\u019f\3\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\2\11\1\u01a0\11\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\12\11\1\u01a1\1\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\u01a2\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\1\u01a3\1\11\1\0\14\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\26\0\1\u0180\17\0\1\u0180\103\0\1\u01a4\77\0\1\u01a5"+
    "\76\0\1\u01a6\132\0\1\u01a7\73\0\1\u01a8\106\0\1\u01a9"+
    "\12\0\1\u01aa\74\0\1\u01ab\101\0\1\u01a7\16\0\1\u01ac"+
    "\73\0\1\u01ad\121\0\1\u01ae\100\0\1\u01af\114\0\1\u01b0"+
    "\72\0\1\u01b1\76\0\1\u01ae\136\0\1\u018a\67\0\1\u015e"+
    "\54\0\1\u01b2\4\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\u01b2\2\11\1\0\12\11\1\u01b2\17\0"+
    "\2\11\3\0\1\11\37\0\1\u01b3\57\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\7\11\1\u01b4\4\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\1\11\1\u01b5\10\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\1\11\1\u01b6\3\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\0\1\11\1\u01b7"+
    "\10\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\10\11\1\u01b8\3\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\6\11\1\u01b9"+
    "\5\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\1\u01ba\1\11"+
    "\1\0\14\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\1\u01bb\7\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\6\11\1\u01bc\5\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\10\11\1\u01bd\3\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\4\11"+
    "\1\u01be\7\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\2\u01bf\5\0\4\u01bf\1\0\2\u01bf"+
    "\1\0\14\u01bf\1\0\2\u01bf\1\0\12\u01bf\20\0\2\u01bf"+
    "\3\0\1\u01bf\35\0\1\u01c0\72\0\1\u01c1\124\0\1\u01c1"+
    "\104\0\1\u01c2\3\0\1\u01c3\106\0\1\u01c4\104\0\1\u01c5"+
    "\73\0\1\u01c4\123\0\1\u01c6\121\0\1\u01c7\72\0\1\u015e"+
    "\72\0\1\u015e\120\0\1\u01af\107\0\1\u015e\52\0\1\u01b2"+
    "\4\0\2\u01c8\5\0\4\u01c8\1\0\2\u01c8\1\0\14\u01c8"+
    "\1\u01b2\2\u01c8\1\0\12\u01c8\1\u01b2\17\0\2\u01c8\3\0"+
    "\1\u01c8\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\6\11\1\u01c9\5\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\10\11\1\u01ca\3\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\1\11\1\u01cb"+
    "\1\11\3\0\5\11\1\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\10\11\1\u01cc"+
    "\3\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\2\11\1\u01cd\11\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\12\11\1\u01ce\1\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\1\11\1\u01cf"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\12\11\1\u01d0\1\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\3\0\1\u015c\4\0\3\u01bf\3\0\5\u01bf\1\0\2\u01bf"+
    "\1\0\14\u01bf\1\u015c\2\u01bf\1\0\12\u01bf\1\u015c\17\0"+
    "\2\u01bf\3\0\1\u01bf\36\0\1\u01d1\53\0\1\u015c\37\0"+
    "\1\u015c\15\0\1\u015c\60\0\1\u01c4\115\0\1\u01d2\70\0"+
    "\1\u01c1\113\0\1\u01d3\126\0\1\u01c1\64\0\1\u01d4\67\0"+
    "\3\u01c8\3\0\5\u01c8\1\0\2\u01c8\1\0\14\u01c8\1\0"+
    "\2\u01c8\1\0\12\u01c8\20\0\2\u01c8\3\0\1\u01c8\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\10\11\1\u01d5"+
    "\3\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\4\11\1\u01d6\5\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\1\u01d7\13\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\2\11\1\u01d8\11\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\1\u01d9\1\11\1\0\14\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\37\0"+
    "\1\u01d2\52\0\1\u015c\37\0\1\u01da\15\0\1\u015c\77\0"+
    "\1\u01db\104\0\1\u01dc\46\0\3\11\3\0\5\11\1\0"+
    "\1\u01dd\1\11\1\0\14\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\5\11\1\u01de\6\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\7\11\1\u01df\4\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\2\11\1\0\6\11"+
    "\1\u01e0\5\11\1\0\2\11\1\0\12\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\4\11\1\u01e1\7\11\1\0\2\11\1\0\12\11"+
    "\20\0\2\11\3\0\1\11\3\0\1\u015c\17\0\1\u017f"+
    "\1\u01e2\1\u01c1\1\u0180\4\0\1\u0181\1\u0182\1\0\1\u0183"+
    "\1\0\1\u0184\1\u0185\1\u01c1\1\u015c\1\u01c1\1\u0186\1\u0180"+
    "\1\u0187\3\0\1\u0188\5\0\1\u015c\51\0\1\u01e3\135\0"+
    "\1\u01a7\43\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\4\11\1\u01e4\5\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\6\11\1\u01e5\5\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\12\11\1\u01e6\1\11\1\0"+
    "\2\11\1\0\12\11\20\0\2\11\3\0\1\11\3\0"+
    "\1\u015c\35\0\1\u01e7\1\0\1\u015c\15\0\1\u015c\53\0"+
    "\1\u01e8\70\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\10\11\1\u01e9\3\11\1\0\2\11\1\0\12\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\10\11\1\u01ea\3\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\42\0\1\u01c1\100\0"+
    "\1\u0182\12\0\1\u01eb\47\0\1\11\1\u01ec\1\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\1\u01ed\1\11\1\0\14\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\31\0\1\u01a7"+
    "\65\0\3\11\3\0\5\11\1\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\0\4\11\1\u01ee\5\11\20\0\2\11"+
    "\3\0\1\11\10\0\3\11\3\0\5\11\1\0\2\11"+
    "\1\0\14\11\1\0\2\11\1\0\4\11\1\u01ef\5\11"+
    "\20\0\2\11\3\0\1\11\10\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\0\11\11\1\u01f0\2\11\1\0\2\11"+
    "\1\0\12\11\20\0\2\11\3\0\1\11\10\0\3\11"+
    "\3\0\5\11\1\0\2\11\1\0\10\11\1\u01f1\3\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11"+
    "\10\0\3\11\3\0\5\11\1\0\1\u01f2\1\11\1\0"+
    "\14\11\1\0\2\11\1\0\12\11\20\0\2\11\3\0"+
    "\1\11\10\0\3\11\3\0\5\11\1\0\2\11\1\0"+
    "\14\11\1\0\2\11\1\0\1\11\1\u01f3\10\11\20\0"+
    "\2\11\3\0\1\11\10\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\0\12\11\1\u01f4\1\11\1\0\2\11\1\0"+
    "\12\11\20\0\2\11\3\0\1\11\10\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\0\14\11\1\0\2\11\1\0"+
    "\7\11\1\u01f5\2\11\20\0\2\11\3\0\1\11\10\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\0\1\u01f6\13\11"+
    "\1\0\2\11\1\0\12\11\20\0\2\11\3\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29394];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\2\1\2\11\34\1\1\11"+
    "\6\1\6\11\1\1\2\11\10\1\3\0\1\1\1\0"+
    "\1\11\1\0\1\1\2\0\1\1\1\0\1\11\2\1"+
    "\1\11\1\0\11\1\2\11\21\1\2\11\10\1\11\11"+
    "\2\1\2\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\2\0\5\11\44\1\5\0\2\1"+
    "\1\11\37\1\1\0\10\1\1\11\5\0\25\1\1\0"+
    "\10\1\1\0\3\1\1\0\3\1\1\0\3\1\3\0"+
    "\24\1\2\0\7\1\12\0\2\1\1\0\2\1\1\0"+
    "\20\1\2\0\3\1\1\0\2\1\11\0\2\1\1\0"+
    "\3\1\1\0\20\1\12\0\1\1\7\0\2\1\1\0"+
    "\20\1\16\0\1\1\1\11\14\1\1\0\1\1\6\0"+
    "\11\1\1\0\1\1\2\0\5\1\3\0\6\1\1\0"+
    "\3\1\2\0\2\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private IElementType getTypeOrIdentifier(IElementType typeConstWord) {
  if (zzCurrentPos - 1 < 0 || (zzCurrentPos - 1 >= 0 && zzBuffer.charAt(zzCurrentPos - 1) != '.')) {
    return typeConstWord;
  }
  else {
    return OctaveTokenTypes.IDENTIFIER;
  }
}

private Stack<IElementType> myExpectedBracketsStack = new Stack<IElementType>();



  OctaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  OctaveLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3928) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { if(!myExpectedBracketsStack.empty() && myExpectedBracketsStack.peek() == OctaveTokenTypes.LBRACKET) {
                                myExpectedBracketsStack.pop();
                              }
                              return OctaveTokenTypes.RBRACKET;
          }
        case 118: break;
        case 117: 
          { return getTypeOrIdentifier(OctaveTokenTypes.UNWIND_PROTECT_CLEANUP_KEYWORD);
          }
        case 119: break;
        case 107: 
          { return getTypeOrIdentifier(OctaveTokenTypes.PERSISTENT_KEYWORD);
          }
        case 120: break;
        case 33: 
          { return OctaveTokenTypes.GT;
          }
        case 121: break;
        case 23: 
          { return OctaveTokenTypes.SEMICOLON;
          }
        case 122: break;
        case 7: 
          { return OctaveTokenTypes.IDENTIFIER;
          }
        case 123: break;
        case 77: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ELSE_KEYWORD);
          }
        case 124: break;
        case 55: 
          { return OctaveTokenTypes.OPERATION_OR_EQ;
          }
        case 125: break;
        case 40: 
          { return OctaveTokenTypes.DOT_LEFT_DIVISION;
          }
        case 126: break;
        case 43: 
          { return OctaveTokenTypes.DOT_MULTIPLICATION;
          }
        case 127: break;
        case 100: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CONTINUE_KEYWORD);
          }
        case 128: break;
        case 94: 
          { return getTypeOrIdentifier(OctaveTokenTypes.GLOBAL_KEYWORD);
          }
        case 129: break;
        case 45: 
          { return OctaveTokenTypes.DOT_POWER;
          }
        case 130: break;
        case 99: 
          { return getTypeOrIdentifier(OctaveTokenTypes.FUNCTION_KEYWORD);
          }
        case 131: break;
        case 75: 
          { return getTypeOrIdentifier(OctaveTokenTypes.FOR_KEYWORD);
          }
        case 132: break;
        case 19: 
          { return OctaveTokenTypes.OR;
          }
        case 133: break;
        case 29: 
          { return OctaveTokenTypes.TILDE;
          }
        case 134: break;
        case 80: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDIF_KEYWORD);
          }
        case 135: break;
        case 44: 
          { return OctaveTokenTypes.DOT_DIVISION;
          }
        case 136: break;
        case 58: 
          { return OctaveTokenTypes.OPERATION_DIV_EQ;
          }
        case 137: break;
        case 15: 
          { return OctaveTokenTypes.PLUS;
          }
        case 138: break;
        case 111: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENUMERATION_KEYWORD);
          }
        case 139: break;
        case 92: 
          { return getTypeOrIdentifier(OctaveTokenTypes.SWITCH_KEYWORD);
          }
        case 140: break;
        case 66: 
          { return OctaveTokenTypes.OPERATION_DOT_PLUS_EQ;
          }
        case 141: break;
        case 2: 
          { return OctaveTokenTypes.BAD_CHARACTER;
          }
        case 142: break;
        case 52: 
          { return OctaveTokenTypes.EQEQ;
          }
        case 143: break;
        case 9: 
          { return OctaveTokenTypes.APOSTROPHE;
          }
        case 144: break;
        case 65: 
          { return OctaveTokenTypes.OPERATION_DOT_MINUS_EQ;
          }
        case 145: break;
        case 104: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDSWITCH_KEYWORD);
          }
        case 146: break;
        case 106: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDMETHODS_KEYWORD);
          }
        case 147: break;
        case 31: 
          { return OctaveTokenTypes.AT;
          }
        case 148: break;
        case 21: 
          { return OctaveTokenTypes.DIVISION;
          }
        case 149: break;
        case 5: 
          { if(!myExpectedBracketsStack.empty() && myExpectedBracketsStack.peek() == OctaveTokenTypes.LBRACE) {
                                myExpectedBracketsStack.pop();
                              }
                              return OctaveTokenTypes.RBRACE;
          }
        case 150: break;
        case 48: 
          { return getTypeOrIdentifier(OctaveTokenTypes.PI_KEYWORD);
          }
        case 151: break;
        case 70: 
          { return getTypeOrIdentifier(OctaveTokenTypes.EPS_KEYWORD);
          }
        case 152: break;
        case 50: 
          { return OctaveTokenTypes.INCREMENT;
          }
        case 153: break;
        case 81: 
          { return getTypeOrIdentifier(OctaveTokenTypes.FALSE_KEYWORD);
          }
        case 154: break;
        case 34: 
          { return OctaveTokenTypes.NOT;
          }
        case 155: break;
        case 13: 
          { return OctaveTokenTypes.MINUS;
          }
        case 156: break;
        case 20: 
          { return OctaveTokenTypes.MULTIPLICATION;
          }
        case 157: break;
        case 60: 
          { return OctaveTokenTypes.NOTEQ;
          }
        case 158: break;
        case 36: 
          { return OctaveTokenTypes.COMPLEX_LITERAL;
          }
        case 159: break;
        case 85: 
          { return getTypeOrIdentifier(OctaveTokenTypes.UNTIL_KEYWORD);
          }
        case 160: break;
        case 73: 
          { return getTypeOrIdentifier(OctaveTokenTypes.TRY_KEYWORD);
          }
        case 161: break;
        case 62: 
          { return OctaveTokenTypes.LE;
          }
        case 162: break;
        case 72: 
          { return getTypeOrIdentifier(OctaveTokenTypes.INF_KEYWORD);
          }
        case 163: break;
        case 105: 
          { return getTypeOrIdentifier(OctaveTokenTypes.OTHERWISE_KEYWORD);
          }
        case 164: break;
        case 78: 
          { return getTypeOrIdentifier(OctaveTokenTypes.TRUE_KEYWORD);
          }
        case 165: break;
        case 27: 
          { myExpectedBracketsStack.add(OctaveTokenTypes.LBRACKET);
                              return OctaveTokenTypes.LBRACKET;
          }
        case 166: break;
        case 42: 
          { return OctaveTokenTypes.DOT_PLUS;
          }
        case 167: break;
        case 51: 
          { return OctaveTokenTypes.OPERATION_PLUS_EQ;
          }
        case 168: break;
        case 82: 
          { return getTypeOrIdentifier(OctaveTokenTypes.BREAK_KEYWORD);
          }
        case 169: break;
        case 49: 
          { return getTypeOrIdentifier(OctaveTokenTypes.IF_KEYWORD);
          }
        case 170: break;
        case 14: 
          { return OctaveTokenTypes.SPACE;
          }
        case 171: break;
        case 46: 
          { return OctaveTokenTypes.DECREMENT;
          }
        case 172: break;
        case 112: 
          { return getTypeOrIdentifier(OctaveTokenTypes.END_TRY_CATCH_KEYWORD);
          }
        case 173: break;
        case 26: 
          { if(!myExpectedBracketsStack.empty() && myExpectedBracketsStack.peek() == OctaveTokenTypes.LPAR) {
                                myExpectedBracketsStack.pop();
                              }
                              return OctaveTokenTypes.RPAR;
          }
        case 174: break;
        case 97: 
          { return getTypeOrIdentifier(OctaveTokenTypes.METHODS_KEYWORD);
          }
        case 175: break;
        case 74: 
          { return getTypeOrIdentifier(OctaveTokenTypes.NAN_KEYWORD);
          }
        case 176: break;
        case 114: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDENUMERATION_KEYWORD);
          }
        case 177: break;
        case 84: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CATCH_KEYWORD);
          }
        case 178: break;
        case 63: 
          { return OctaveTokenTypes.GE;
          }
        case 179: break;
        case 10: 
          { return OctaveTokenTypes.LEFT_DIVISION;
          }
        case 180: break;
        case 69: 
          { return OctaveTokenTypes.OPERATION_DOT_POWER_EQ;
          }
        case 181: break;
        case 22: 
          { return OctaveTokenTypes.POWER;
          }
        case 182: break;
        case 47: 
          { return OctaveTokenTypes.OPERATION_MINUS_EQ;
          }
        case 183: break;
        case 30: 
          { return OctaveTokenTypes.COLON;
          }
        case 184: break;
        case 93: 
          { return getTypeOrIdentifier(OctaveTokenTypes.RETURN_KEYWORD);
          }
        case 185: break;
        case 37: 
          { if (!myExpectedBracketsStack.empty()
                                  && (myExpectedBracketsStack.peek() == OctaveTokenTypes.LBRACKET
                                  || myExpectedBracketsStack.peek() == OctaveTokenTypes.LBRACE)) {
                                if (zzCurrentPos - 1 >= 0 && zzBuffer.charAt(zzCurrentPos - 1) == ' ') {
                                  return OctaveTokenTypes.STRING;
                                }
                              }
                              for (int i = zzCurrentPos - 1; i >= 0; i--) {
                                if (zzBuffer.charAt(i) == '\n') {
                                  return OctaveTokenTypes.STRING;
                                }
                                if (('a' <= zzBuffer.charAt(i) && zzBuffer.charAt(i) <= 'z')
                                    || ('A' <= zzBuffer.charAt(i) && zzBuffer.charAt(i) <= 'Z')
                                    || zzBuffer.charAt(i) == ')'
                                    || zzBuffer.charAt(i) == '}'
                                    || zzBuffer.charAt(i) == ']'
                                  ) {
                                  zzMarkedPos = zzCurrentPos + 1;

                                  return OctaveTokenTypes.APOSTROPHE;
                                }
                                if (zzBuffer.charAt(i) == '='
                                    || zzBuffer.charAt(i) == '<'
                                    || zzBuffer.charAt(i) == '>'
                                    || zzBuffer.charAt(i) == '('
                                    || zzBuffer.charAt(i) == '{'
                                    || zzBuffer.charAt(i) == '['
                                    || zzBuffer.charAt(i) == ','
                                    || zzBuffer.charAt(i) == ';'
                                    || zzBuffer.charAt(i) == ':'
                                  //todo add
                                  ) {
                                  break;
                                }
                              }
                              return OctaveTokenTypes.STRING;
          }
        case 186: break;
        case 116: 
          { return getTypeOrIdentifier(OctaveTokenTypes.END_UNWIND_PROTECT_KEYWORD);
          }
        case 187: break;
        case 3: 
          { return OctaveTokenTypes.FORMFEED;
          }
        case 188: break;
        case 64: 
          { return OctaveTokenTypes.HEX_INTEGER;
          }
        case 189: break;
        case 91: 
          { return getTypeOrIdentifier(OctaveTokenTypes.STATIC_KEYWORD);
          }
        case 190: break;
        case 18: 
          { return OctaveTokenTypes.AND;
          }
        case 191: break;
        case 110: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDCLASSDEF_KEYWORD);
          }
        case 192: break;
        case 95: 
          { return getTypeOrIdentifier(OctaveTokenTypes.REALMIN_KEYWORD);
          }
        case 193: break;
        case 38: 
          { return OctaveTokenTypes.OPERATION_LEFT_DIV_EQ;
          }
        case 194: break;
        case 87: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ELSEIF_KEYWORD);
          }
        case 195: break;
        case 67: 
          { return OctaveTokenTypes.OPERATION_DOT_MULT_EQ;
          }
        case 196: break;
        case 35: 
          { return OctaveTokenTypes.FLOAT_NUMBER_LITERAL;
          }
        case 197: break;
        case 17: 
          { return OctaveTokenTypes.EQ;
          }
        case 198: break;
        case 83: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CLEAR_FUNCTION);
          }
        case 199: break;
        case 76: 
          { return OctaveTokenTypes.SIMPLE_KEYWORD;
          }
        case 200: break;
        case 8: 
          { return OctaveTokenTypes.INTEGER_LITERAL;
          }
        case 201: break;
        case 96: 
          { return getTypeOrIdentifier(OctaveTokenTypes.REALMAX_KEYWORD);
          }
        case 202: break;
        case 89: 
          { return getTypeOrIdentifier(OctaveTokenTypes.EVENTS_KEYWORD);
          }
        case 203: break;
        case 115: 
          { return getTypeOrIdentifier(OctaveTokenTypes.UNWIND_PROTECT_KEYWORD);
          }
        case 204: break;
        case 71: 
          { if (zzCurrentPos - 1 < 0 || zzCurrentPos + 3 >= zzBuffer.length() ||
                                    (zzCurrentPos - 1 >= 0 && zzBuffer.charAt(zzCurrentPos - 1) != ':'
                                    && zzCurrentPos + 3 < zzBuffer.length() && zzBuffer.charAt(zzCurrentPos + 3) != ':')) {
                                  return getTypeOrIdentifier(OctaveTokenTypes.END_KEYWORD);
                                }
                                else {
                                  return OctaveTokenTypes.IDENTIFIER;
                                }
          }
        case 205: break;
        case 61: 
          { return getTypeOrIdentifier(OctaveTokenTypes.NA_KEYWORD);
          }
        case 206: break;
        case 102: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDEVENTS_KEYWORD);
          }
        case 207: break;
        case 109: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDFUNCTION_KEYWORD);
          }
        case 208: break;
        case 24: 
          { return OctaveTokenTypes.COMMA;
          }
        case 209: break;
        case 98: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDWHILE_KEYWORD);
          }
        case 210: break;
        case 54: 
          { return OctaveTokenTypes.DOUBLE_AND;
          }
        case 211: break;
        case 39: 
          { return getTypeOrIdentifier(OctaveTokenTypes.DO_KEYWORD);
          }
        case 212: break;
        case 16: 
          { return OctaveTokenTypes.TAB;
          }
        case 213: break;
        case 57: 
          { return OctaveTokenTypes.OPERATION_MULT_EQ;
          }
        case 214: break;
        case 1: 
          { return OctaveTokenTypes.LINE_BREAK;
          }
        case 215: break;
        case 86: 
          { return getTypeOrIdentifier(OctaveTokenTypes.WHILE_KEYWORD);
          }
        case 216: break;
        case 53: 
          { return OctaveTokenTypes.OPERATION_AND_EQ;
          }
        case 217: break;
        case 68: 
          { return OctaveTokenTypes.OPERATION_DOT_DIV_EQ;
          }
        case 218: break;
        case 88: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDFOR_KEYWORD);
          }
        case 219: break;
        case 41: 
          { return OctaveTokenTypes.DOT_MINUS;
          }
        case 220: break;
        case 79: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CASE_KEYWORD);
          }
        case 221: break;
        case 108: 
          { return getTypeOrIdentifier(OctaveTokenTypes.PROPERTIES_KEYWORD);
          }
        case 222: break;
        case 32: 
          { return OctaveTokenTypes.LT;
          }
        case 223: break;
        case 25: 
          { myExpectedBracketsStack.add(OctaveTokenTypes.LPAR);
                              return OctaveTokenTypes.LPAR;
          }
        case 224: break;
        case 6: 
          { myExpectedBracketsStack.add(OctaveTokenTypes.LBRACE);
                              return OctaveTokenTypes.LBRACE;
          }
        case 225: break;
        case 90: 
          { return getTypeOrIdentifier(OctaveTokenTypes.PARFOR_KEYWORD);
          }
        case 226: break;
        case 4: 
          { return OctaveTokenTypes.COMMENT;
          }
        case 227: break;
        case 113: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDPROPERTIES_KEYWORD);
          }
        case 228: break;
        case 59: 
          { return OctaveTokenTypes.OPERATION_POWER_EQ;
          }
        case 229: break;
        case 103: 
          { return getTypeOrIdentifier(OctaveTokenTypes.ENDPARFOR_KEYWORD);
          }
        case 230: break;
        case 101: 
          { return getTypeOrIdentifier(OctaveTokenTypes.CLASSDEF_KEYWORD);
          }
        case 231: break;
        case 12: 
          { return getTypeOrIdentifier(OctaveTokenTypes.E_KEYWORD);
          }
        case 232: break;
        case 56: 
          { return OctaveTokenTypes.DOUBLE_OR;
          }
        case 233: break;
        case 11: 
          { return OctaveTokenTypes.DOT;
          }
        case 234: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
